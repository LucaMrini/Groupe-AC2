---
title: "eda luca"
format: html
editor: visual
---

```{r heat map}

```

```{r barplot biggest 15}



# Create custom hover text with country names and counts for the top fifteen countries
hover_text <- paste("Country: ", filtered_data$Country.Name, "<br>",
                    "Frequency: ", filtered_data$count)

# Create an interactive bar plot with updated hover information and remove default hover info
plotly::plot_ly(x = filtered_data$Country.Name, y = filtered_data$count, type = "bar",
                marker = list(color = "skyblue", line = list(color = "black", width = 1)),
                text = hover_text, hoverinfo = "text") %>%
  plotly::layout(title = "Frequency of Country Names (Top Fifteen)",
                 xaxis = list(title = "Country Names", tickangle = 45, categoryorder = "array", categoryarray = top_fifteen),
                 yaxis = list(title = "Frequency"))


```

```{r barplot all}
# Assuming sorted_agg_data contains aggregated data sorted by count

# Selecting the top 15 countries and ordering them by count
top_fifteen <- head(sorted_agg_data[order(sorted_agg_data$count, decreasing = TRUE), ], 15)

# Create an index to mark whether a country is in the top 15 or not
sorted_agg_data$TopFifteen <- ifelse(sorted_agg_data$Country.Name %in% top_fifteen$Country.Name, sorted_agg_data$Country.Name, "Other")

# Order all countries based on their counts
sorted_agg_data <- sorted_agg_data[order(sorted_agg_data$count, decreasing = TRUE), ]

# Create custom hover text with country names and player counts
hover_text <- paste("Country: ", sorted_agg_data$Country.Name, "<br>",
                    "Players: ", sorted_agg_data$count)

# Create an interactive bar plot with updated hover information and remove default hover info
plotly::plot_ly(x = sorted_agg_data$Country.Name, y = sorted_agg_data$count, type = "bar",
                marker = list(color = ifelse(sorted_agg_data$TopFifteen == "Other", "gray", "skyblue"),
                              line = list(color = "black", width = 1)),
                text = hover_text, hoverinfo = "text") %>%
  plotly::layout(title = "Number of players per country",
                 xaxis = list(title = "Country Names", tickangle = 45, categoryorder = "array", categoryarray = sorted_agg_data$Country.Name),
                 yaxis = list(title = "Number of players"))

```

```{r missing values }

```

```{r répartion club}
library(ggplot2)
library(plotly)

# Function to generate distribution plot from a dataset
plot_player_distribution <- function(player_data) {
  # Reorder the data frame by player counts
  player_data <- player_data[order(-player_data$players), ]
  player_data$league <- factor(player_data$league, levels = player_data$league)
  
  # Generate the plot
  p <- ggplot(player_data, aes(x = reorder(league, -players), y = players, fill = league, text = paste("League: ", league, "<br>Players: ", players))) +
    geom_bar(stat = "identity", color = "black", alpha = 1, show.legend = TRUE) +
    labs(title = "Distribution of Soccer Players in Big Five Leagues",
         x = "League",
         y = "Number of Players") +
    theme_minimal()
  
  # Convert ggplot to plotly
  ggplotly(p, tooltip = "text")
}

# Example dataset (Replace this with your actual dataset)
combined_data <- data.frame(
  league = c("Premier League", "La Liga", "Serie A", "Bundesliga", "Ligue 1"),
  players = c(85, 69, 80, 69, 84)
)

plot_player_distribution(combined_data)

```

```{r gdp répar}

```

```{r revenu big 5}
library(plotly)

# Provided data
Bundesliga <- c("2.018", "2.275", "2.392", "2.712", "2.793", "3.168", "3.345", "3.208", "3.005", "3.149", "3.550", "3.450")
SerieA <- c("1.677", "1.700", "1.790", "1.917", "2.062", "2.239", "2.495", "2.057", "2.521", "2.350", "2.600", "2.050")
LaLiga <- c("1.868", "1.933", "2.053", "2.437", "2.865", "3.073", "3.378", "3.114", "2.953", "3.277", "3.300", "3.400")
Ligue1 <- c("1.297", "1.498", "1.418", "1.485", "1.643", "1.692", "1.902", "1.598", "1.614", "2.026", "2.100", "2.050")
Premierleague <- c("2.946", "3.897", "4.403", "4.865", "5.301", "5.440", "5.843", "5.123", "5.498", "6.442", "6.605", "6.662")
Dates <- c("2012-2013", "2013-2014", "2014-2015", "2015-2016", "2016-2017", "2017-2018", "2018-2019", "2019-2020", "2020-2021", "2021-2022", "2022-2023", "2023-2024")

# Convert values to numeric format
Bundesliga <- as.numeric(Bundesliga)
SerieA <- as.numeric(SerieA)
LaLiga <- as.numeric(LaLiga)
Ligue1 <- as.numeric(Ligue1)
# Remove commas and convert to numeric for Premierleague
Premierleague <- gsub(",", "", Premierleague)
Premierleague <- as.numeric(Premierleague)

library(plotly)

# Provided data
# (Your data remains the same)

# Convert values to numeric format
# (Your conversions remain the same)

# Create a data frame
data <- data.frame(
  Dates = Dates,
  Bundesliga = Bundesliga,
  SerieA = SerieA,
  LaLiga = LaLiga,
  Ligue1 = Ligue1,
  Premierleague = Premierleague
)

# Filter out traces with zero values
data_filtered <- data[rowSums(data[, -1] != 0) > 0, ]

# Define color palette
colors <- c('red', 'blue', 'green', 'orange', 'purple')

# Create a Plotly line plot with filtered data
plot_ly(data_filtered, x = ~Dates, type = 'scatter', mode = 'lines+markers') %>%
  add_trace(y = ~Bundesliga, name = 'Bundesliga', line = list(color = colors[1]), marker = list(color = colors[1])) %>%
  add_trace(y = ~SerieA, name = 'SerieA', line = list(color = colors[2]), marker = list(color = colors[2])) %>%
  add_trace(y = ~LaLiga, name = 'LaLiga', line = list(color = colors[3]), marker = list(color = colors[3])) %>%
  add_trace(y = ~Ligue1, name = 'Ligue1', line = list(color = colors[4]), marker = list(color = colors[4])) %>%
  add_trace(y = ~Premierleague, name = 'Premierleague', line = list(color = colors[5]), marker = list(color = colors[5])) %>%
  layout(
    title = 'Football League Comparison',
    xaxis = list(title = 'Season'),
    yaxis = list(
      title = 'Value',
      range = c(0, 8),  # Adjust the range as needed
      tickvals = seq(0, 8, by = 1),  # Set the specific tick values you want
      ticktext = seq(0, 8, by = 1)  # Set corresponding tick labels
    ),
    showlegend = TRUE
  )

```

```{r pie tv}
library(tibble)
library(plotly)

tv <- tibble(
  `Comp` = c("Premier League", "La Liga", "Bundesliga", "Serie A", "Ligue 1"),
  `Revenue` = c(3.518, 2.049, 1.460, 1.123, 6.87)
)

# Calculate percentages for the pie chart
tv$percent <- tv$Revenue / sum(tv$Revenue) * 100


data <- data.frame("Categorie" = tv$Comp, "X1960" = tv$Revenue)

colors <- c('rgb(211,94,96)', 'rgb(128,133,133)', 'rgb(144,103,167)', 'rgb(171,104,87)', 'rgb(114,147,203)')

fig <- plot_ly(data, labels = ~Categorie, values = ~X1960, type = 'pie',
               textposition = 'inside',
               textinfo = 'label+percent',
               insidetextfont = list(color = '#FFFFFF'),
               hoverinfo = 'text',  
               text = ~paste(tv$Comp, '<br>', 'Revenue: $', X1960, 'B', '<br>', round(tv$percent, 2), '%'),
               marker = list(colors = colors,
                             line = list(color = '#FFFFFF', width = 1)),
               showlegend = FALSE)

fig <- fig %>% layout(title = 'Tv revenue by league in 2021/2022',
                      xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
                      yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))

fig


```
