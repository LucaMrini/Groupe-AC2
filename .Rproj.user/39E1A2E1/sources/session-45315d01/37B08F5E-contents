```{r heat map}

```

```{r barplot biggest 15}

#demo_clean <- read.csv("data/luca/demo_clean.csv")
data <- demo_clean$Country.Name
agg_data <- aggregate(count ~ Country.Name, data = data.frame(Country.Name = data, count = 1), FUN = length)
sorted_agg_data <- agg_data[order(agg_data$count, decreasing = TRUE), ]
top_fifteen <- sorted_agg_data$Country.Name[15:1]
filtered_data <- sorted_agg_data[sorted_agg_data$Country.Name %in% top_fifteen, ]
hover_text <- paste("Country: ", filtered_data$Country.Name, "<br>",
                    "Frequency: ", filtered_data$count)
plotly::plot_ly(x = filtered_data$Country.Name, y = filtered_data$count, type = "bar",
                marker = list(color = "skyblue", line = list(color = "black", width = 1)),
                 hoverinfo = hover_text) %>%
  plotly::layout(title = "Frequency of Country Names (Top Fifteen)",
                 xaxis = list(title = "Country Names", tickangle = 45, categoryorder = "array", categoryarray = top_fifteen),
                 yaxis = list(title = "Frequency"))
```

```{r barplot all}

#demo_clean <- read.csv("data/luca/demo_clean.csv")
data <- demo_clean$Country.Name
agg_data <- aggregate(count ~ Country.Name, data = data.frame(Country.Name = data, count = 1), FUN = length)
sorted_agg_data <- agg_data[order(agg_data$count, decreasing = TRUE), ]
top_fifteen <- head(sorted_agg_data[order(sorted_agg_data$count, decreasing = FALSE), ], 57)

sorted_agg_data$TopFifteen <- ifelse(sorted_agg_data$Country.Name %in% top_fifteen$Country.Name, sorted_agg_data$Country.Name, "Other")

sorted_agg_data <- sorted_agg_data[order(sorted_agg_data$count, decreasing = FALSE), ]

hover_text <- paste("Country: ", sorted_agg_data$Country.Name, "<br>",
                    "Players: ", sorted_agg_data$count)

plotly::plot_ly(x = sorted_agg_data$Country.Name, y = sorted_agg_data$count, type = "bar",
                marker = list(color = ifelse(sorted_agg_data$TopFifteen == "Other", "skyblue", "grey"),
                              line = list(color = "black", width = 1))) %>%
  plotly::layout(title = "Number of players per country",
                 xaxis = list(title = "Country Names", tickangle = 45, categoryorder = "array", categoryarray = sorted_agg_data$Country.Name),
                 yaxis = list(title = "Number of players"))

```

VSVSV

```{r répartion club}

plot_player_distribution <- function(player_data) {
  player_data <- player_data[order(player_data$players), ]  # Arrange in increasing order
  player_data$league <- factor(player_data$league, levels = player_data$league)
  

  my_colors <- c("#1f77b4", "#ff7f0e", "#2ca02c", "#d62728", "#9467bd")
  
  p <- ggplot(player_data, aes(x = reorder(league, players), y = players, fill = league, text = paste("League: ", league, "<br>Players: ", players))) +
    geom_bar(stat = "identity", color = "black", alpha = 1, show.legend = TRUE, width = 0.5) +
    scale_fill_manual(values = my_colors) +  
    labs(title = "Distribution of Soccer Players in Big Five Leagues",
         x = "League",
         y = "Number of Players") +
    theme_minimal()
  
  ggplotly(p, tooltip = "text")
}

combined_data <- data.frame(
  league = c("Premier League", "La Liga", "Serie A", "Bundesliga", "Ligue 1"),
  players = c(85, 69, 80, 69, 84)
)

plot_player_distribution(combined_data)


```

```{r gdp répar}



```

DcACA

```{r revenu big 5}
Bundesliga <- c("2.018", "2.275", "2.392", "2.712", "2.793", "3.168", "3.345", "3.208", "3.005", "3.149", "3.550", "3.450")
SerieA <- c("1.677", "1.700", "1.790", "1.917", "2.062", "2.239", "2.495", "2.057", "2.521", "2.350", "2.600", "2.050")
LaLiga <- c("1.868", "1.933", "2.053", "2.437", "2.865", "3.073", "3.378", "3.114", "2.953", "3.277", "3.300", "3.400")
Ligue1 <- c("1.297", "1.498", "1.418", "1.485", "1.643", "1.692", "1.902", "1.598", "1.614", "2.026", "2.100", "2.050")
Premierleague <- c("2.946", "3.897", "4.403", "4.865", "5.301", "5.440", "5.843", "5.123", "5.498", "6.442", "6.605", "6.662")
Dates <- c("2012-2013", "2013-2014", "2014-2015", "2015-2016", "2016-2017", "2017-2018", "2018-2019", "2019-2020", "2020-2021", "2021-2022", "2022-2023", "2023-2024")

# Convert values to numeric format
Bundesliga <- as.numeric(Bundesliga)
SerieA <- as.numeric(SerieA)
LaLiga <- as.numeric(LaLiga)
Ligue1 <- as.numeric(Ligue1)
Premierleague <- as.numeric(Premierleague)


data <- data.frame(
  Dates = Dates,
  Bundesliga = Bundesliga,
  SerieA = SerieA,
  LaLiga = LaLiga,
  Ligue1 = Ligue1,
  Premierleague = Premierleague


data$Dates <- factor(data$Dates, levels = Dates)
data_melted <- melt(data, id.vars = "Dates")

p <- ggplot(data_melted, aes(x = Dates, y = value, color = variable, group = variable)) +
  geom_line() +  
  geom_point() +
  labs(
    title = "Football League Comparison",
    x = "Season",
    y = "Value in billions"
  ) +
  scale_color_manual(values = c("Bundesliga" = "red", "SerieA" = "blue", "LaLiga" = "green", "Ligue1" = "orange", "Premierleague" = "purple")) +
  theme_minimal() +
  theme(legend.position = "top")
ggplotly(p, tooltip = c("", "value"))

```

JVHJVC

```{r pie tv}


tv <- tibble(
  `Comp` = c("Premier League", "La Liga", "Bundesliga", "Serie A", "Ligue 1"),
  `Revenue` = c(3.518, 2.049, 1.460, 1.123, 6.87)
)

# Calculate percentages for the pie chart
tv$percent <- tv$Revenue / sum(tv$Revenue) * 100


data <- data.frame("Categorie" = tv$Comp, "X1960" = tv$Revenue)

colors <- c('rgb(211,94,96)', 'rgb(128,133,133)', 'rgb(144,103,167)', 'rgb(171,104,87)', 'rgb(114,147,203)')

fig <- plot_ly(data, labels = ~Categorie, values = ~X1960, type = 'pie',
               textposition = 'inside',
               textinfo = 'label+percent',
               insidetextfont = list(color = '#FFFFFF'),
               hoverinfo = 'text',  
               text = ~paste(tv$Comp, '<br>', 'Revenue: $', X1960, 'B', '<br>', round(tv$percent, 2), '%'),
               marker = list(colors = colors,
                             line = list(color = '#FFFFFF', width = 1)),
               showlegend = FALSE)

fig <- fig %>% layout(title = 'Tv revenue by league in 2021/2022',
                      xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
                      yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))

fig


```
