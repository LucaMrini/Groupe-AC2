# 3 EDA

```{r, echo = FALSE, message = FALSE,error=FALSE}
source(here::here("scripts/setup.R"))
source(here::here("scripts/dataload.R"))
```

## 3.1 EDA Ballon d'or

```         
```

## 3.2 EDA Player skills 

::: {.callout-caution collapse="true"}
## reminder on our picking criteria for players and leagues
At least 9 matches played with a minimum of 405 minutes

We adopted a criterion requiring our selected players to have participated in at least half the matches within a season. This decision aimed to ensure a fair assessment despite scenarios where players were transferred midway through a season or played limited minutes, such as appearing in only nine matches but for short durations, like the final 10 minutes. This methodology was considered a balanced compromise, enabling a more equitable evaluation of a player's performance within the context of the season.
:::

### 3.2.1 top 10 players per league 

In this part we highlight which player for each of the big five league has the highest ratio of goals per 90 minutes.

[*Hover to see the values*]{.smallcaps}

3.2.1.1 Premier league

```{r Top 10 Premier League,echo=T}

top_players_plot <- premier_league_players %>%
  top_n(10, Goals) %>%
  arrange(desc(Goals)) %>%
  plot_ly(x = ~reorder(Player, Goals), y = ~Goals, type = "bar", marker = list(color = "#1f77b4", opacity = 0.7)) %>%
  layout(
    title = "Top 10 Premier League",
    xaxis = list(title = "Player", categoryorder = "total ascending"),
    yaxis = list(title = "Goals per 90 min"),
    showlegend = FALSE
  )

top_players_plot


```

::: {.callout-note}
"Mohamed Salah and Jamie Vardy top the Premier League scoring charts with a ratio of 0,75"
:::

#### 3.2.1.2 Bundesliga

```{r top 10 Bundesliga,echo=T}

top_bundesliga_players <- bundesliga_players %>%
  top_n(10, Goals) %>%
  arrange(desc(Goals))

top_bundesliga_plot <- top_bundesliga_players %>%
  plot_ly(x = ~reorder(Player, Goals), y = ~Goals, type = "bar", marker = list(color = "#ff7f0e", opacity = 0.7)) %>%
  layout(title = "Top 10 Bundesliga",
         xaxis = list(title = "Player"),
         yaxis = list(title = "Goals per 90 min"),
         showlegend = FALSE) %>%
  layout(xaxis = list(categoryorder = "total ascending"))

top_bundesliga_plot
```

::: {.callout-note}
Robert Lewandowski alone at the top of the best Goals ranking at 1.07.
:::

#### 3.2.1.3 La Liga

```{r top 10 statistical goals in La Liga,echo=T}

top_la_liga_players <- la_liga_players %>%
  top_n(10, Goals) %>%
  arrange(desc(Goals))

top_la_liga_plot <- top_la_liga_players %>%
  plot_ly(x = ~reorder(Player, Goals), y = ~Goals, type = "bar", marker = list(color = "#2ca02c", opacity = 0.7)) %>%
  layout(title = "Top 10 La Liga",
         xaxis = list(title = "Player"),
         yaxis = list(title = "Goals per 90 min"),
         showlegend = FALSE) %>%
  layout(xaxis = list(categoryorder = "total ascending"))

top_la_liga_plot
```

::: {.callout-note}
Karim Benzema is the most successful per 90 minutes in the Spanish league with a ratio of 0,94..
:::

#### 3.2.1.4 Serie A

```{r 10 best Goal statistics in Serie A, echo=T}

top_serie_a_players <- serie_a_players %>%
  top_n(10, Goals) %>%
  arrange(desc(Goals))

top_serie_a_plot <- top_serie_a_players %>%
  plot_ly(x = ~reorder(Player, Goals), y = ~Goals, type = "bar", marker = list(color = "#d62728", opacity = 0.7)) %>%
  layout(title = "Top 10 Serie A",
         xaxis = list(title = "Player"),
         yaxis = list(title = "Goals per 90 min"),
         showlegend = FALSE) %>%
  layout(xaxis = list(categoryorder = "total ascending"))

top_serie_a_plot
```

::: {.callout-note}
With 0,9 Ciro Immobile is at the top of Serie A.
:::

#### 3.2.1.5 Ligue 1

```{r 10 best in Ligue 1, echo=T}

top_ligue_1_players <- ligue_1_players %>%
  top_n(10, Goals) %>%
  arrange(desc(Goals))

top_ligue_1_plot <- top_ligue_1_players %>%
  plot_ly(x = ~reorder(Player, Goals), y = ~Goals, type = "bar", marker = list(color = "#9467bd", opacity = 1)) %>%
  layout(title = "Top 10 Ligue 1",
         xaxis = list(title = "Player"),
         yaxis = list(title = "GGoals per 90 min"),
         showlegend = FALSE) %>%
  layout(xaxis = list(categoryorder = "total ascending"))

top_ligue_1_plot
```

::: {.callout-note}
Wissam Ben Yedder has the best Goals statistic in Ligue 1 with a ratio of 0,89.
:::

::: {.callout-tip}
Upon examination, it's evident that the leading player in the Premier League possesses the lowest ratio at 0.75 goals per 90 minutes, while the Bundesliga's top performer holds the highest at 1.07. This disparity might be attributed to various factors influencing playing styles, defensive strategies, or even the overall competitiveness within each league.

The Premier League, known for its rigorous and defensive nature, often presents challenges for consistent goal-scoring. Consequently, the lower ratio in this league's top performer could indicate a tougher environment for forwards to maintain high goal-scoring frequencies. On the contrary, the Bundesliga, recognized for its offensive prowess and relatively open style of play, may provide more opportunities for players to register higher goal-scoring ratios.

Factors such as team tactics, individual player abilities, and the overall competitive balance within each league significantly impact these ratios. This analysis sheds light on the diverse dynamics influencing goal-scoring efficiency across different leagues in European football."
:::

### 3.2.2 Distribution of Age, Height and Weight for the big Five.

In this visualization, we examine the distribution of Age, Height, and Weight for each league, with the average highlighted by a green vertical bar. Notably, we observe that Height and Weight exhibit a tighter distribution around their respective averages compared to Age.

Height Analysis: The Bundesliga stands out with the highest average height at 184 centimeters, featuring its tallest player at over 2 meters and the shortest around 170 centimeters. In contrast, all other leagues have at least one player within the 160-165 centimeters range. Serie A follows closely with the second-highest average at 183 centimeters, but it showcases a more significant size spread between its shortest and tallest members.

Weight Analysis: Similarly, the Bundesliga leads with the highest average weight at 79 kg, mirroring the height trend. Serie A and La Liga rank second and third with average weights at 77 kg. Intriguingly, La Liga hosts the heaviest player, weighing over 95 kg.

Age Analysis: Interestingly, despite the variations in physical attributes, all leagues exhibit remarkably similar average ages, ranging between 26 and 28 years old. This uniformity in average age across leagues suggests consistency in player age profiles despite differences in physical characteristics.

[*Hover to see the values*]{.smallcaps}

```{r mega,echo=TRUE,error=TRUE}
source(here::here("scripts/dataload.R"))
create_histogram_weight_with_average_contour <- function(data, title, color) {
  avg_weight <- round(mean(data$Weight))
  plot <- plot_ly(data, x = ~Weight, type = "histogram", name = title,
                  marker = list(color = color, line = list(color = 'white', width = 0.5))) %>%
    add_trace(x = c(avg_weight, avg_weight), y = c(0, 30),
              type = "scatter", mode = "lines", line = list(color = "green", width = 2), showlegend = FALSE,
              text = avg_weight, hoverinfo = "text") %>%
    layout(title = "Average weight by league", xaxis = list(title = "Weight"), yaxis = list(title = "Number of players"),
           bargap = 0.1, showlegend = TRUE)
  return(plot)
}

plot_premier_league_weight <- create_histogram_weight_with_average_contour(premier_league_players, "Premier League", "#1f77b4")
plot_bundesliga_weight <- create_histogram_weight_with_average_contour(bundesliga_players, "Bundesliga", "#ff7f0e")
plot_la_liga_weight <- create_histogram_weight_with_average_contour(la_liga_players, "La Liga", "#2ca02c")
plot_serie_a_weight <- create_histogram_weight_with_average_contour(serie_a_players, "Serie A", "#d62728")
plot_ligue_1_weight <- create_histogram_weight_with_average_contour(ligue_1_players, "Ligue 1", "#9467bd")

subplot(
  plot_premier_league_weight, 
  plot_bundesliga_weight, 
  plot_la_liga_weight, 
  plot_serie_a_weight, 
  plot_ligue_1_weight, 
  nrows = 3
)

create_histogram_with_average <- function(data, title, color) {
  avg_age <- round(mean(data$Age))
  plot <- plot_ly(data, x = ~Age, type = "histogram", name = title,
                  marker = list(color = color)) %>%
    add_trace(x = c(avg_age, avg_age), y = c(0, 22),
              type = "scatter", mode = "lines", line = list(color = "green", width = 2),showlegend = FALSE,
              text = avg_age, hoverinfo = "text") %>%
    layout(title = "Average age by League", xaxis = list(title = "Age"), yaxis = list(title = "Number of players"),bargap = 0.1, showlegend = TRUE)
  return(plot)
}

plot_premier_league <- create_histogram_with_average(premier_league_players, "Premier League", "skyblue")
plot_bundesliga <- create_histogram_with_average(bundesliga_players, "Bundesliga", "#ff7f0e")
plot_la_liga <- create_histogram_with_average(la_liga_players, "La Liga", "#2ca02c")
plot_serie_a <- create_histogram_with_average(serie_a_players, "Serie A", "#d62728")
plot_ligue_1 <- create_histogram_with_average(ligue_1_players, "Ligue 1", "#9467bd")

subplot(
  plot_premier_league, 
  plot_bundesliga, 
  plot_la_liga, 
  plot_serie_a, 
  plot_ligue_1, 
  nrows = 3
)
create_histogram_height_with_average_contour <- function(data, title, color) {
  avg_height <- round(mean(data$Height))
  plot <- plot_ly(data, x = ~Height, type = "histogram", name = title,
                  marker = list(color = color, line = list(color = 'white', width = 0.5))) %>%
    add_trace(x = c(avg_height, avg_height), y = c(0, 35),
              type = "scatter", mode = "lines", line = list(color = "green", width = 2), showlegend = FALSE,
              text = avg_height, hoverinfo = "text") %>%
    layout(title = "Average height by league", xaxis = list(title = "Height"), yaxis = list(title = "Density"),
           bargap = 0.1, showlegend = TRUE)
  return(plot)
}

plot_premier_league_height <- create_histogram_height_with_average_contour(premier_league_players, "Premier League", "#1f77b4")
plot_bundesliga_height <- create_histogram_height_with_average_contour(bundesliga_players, "Bundesliga", "#ff7f0e")
plot_la_liga_height <- create_histogram_height_with_average_contour(la_liga_players, "La Liga", "#2ca02c")
plot_serie_a_height <- create_histogram_height_with_average_contour(serie_a_players, "Serie A", "#d62728")
plot_ligue_1_height <- create_histogram_height_with_average_contour(ligue_1_players, "Ligue 1", "#9467bd")

subplot(
  plot_premier_league_height,
  plot_bundesliga_height,
  plot_la_liga_height,
  plot_serie_a_height,
  plot_ligue_1_height,
  nrows = 3
)


ui <- fluidPage(
  selectInput("plot_select", "Select Plot", choices = c("Age", "Weight", "Height")),
  plotlyOutput("plot_output")
)

server <- function(input, output) {
  output$plot_output <- renderPlotly({
    if (input$plot_select == "Age") {
      subplot(
        plot_premier_league, 
        plot_bundesliga, 
        plot_la_liga, 
        plot_serie_a, 
        plot_ligue_1, 
        nrows = 3
      )
    } else if (input$plot_select == "Weight") {
      subplot(
        plot_premier_league_weight, 
        plot_bundesliga_weight, 
        plot_la_liga_weight, 
        plot_serie_a_weight, 
        plot_ligue_1_weight, 
        nrows = 3
      )
    } else if (input$plot_select == "Height") {
      
      subplot(
        plot_premier_league_height, 
        plot_bundesliga_height, 
        plot_la_liga_height, 
        plot_serie_a_height, 
        plot_ligue_1_height, 
        nrows = 3
      )
    }
  })
}

shinyApp(ui = ui, server = server)
```

::: {.callout-tip}
## Key takeaways

Although the average age across different leagues remains relatively consistent, an intriguing observation emerges regarding player physicality within the leagues. The Bundesliga appears to have a higher concentration of physically robust players, while the Premier League showcases a lower proportion in comparison. These findings hold a logical correlation, as a taller physique often correlates with a greater body weight.

This distinction in player physicality might indicate varying playing styles or recruitment preferences across leagues. The Bundesliga's emphasis on physicality could suggest a game strategy favoring strength and athleticism, whereas the Premier League might prioritize other attributes or playing styles over sheer physicality.
:::

### 3.2.3 Comparison of the top 5 scorers and worst 5 Goals of each League (pq on a des 0 goals et des goals on target ...)

Utilizing this radar map, we can visually compare the skill profiles of the best and least performing players in each league, focusing on key characteristics defining a forward player's skill set. This evaluation aids in understanding the criteria distinguishing superior players from others. It's essential to note that excelling as a forward isn't solely about goal-scoring abilities; rather, it encompasses a diverse arsenal of skills including passes, dribbling, and aerial duels.

[*Hover to see the values*]{.smallcaps}

```{r Comparison of the top 5 scorers and worst 5 Goals of each League (radar map),echo=T}

fig <- plot_ly(
  type = 'scatterpolar',
  fill = 'toself'
) 

fig <- fig %>%
  add_trace(
    r = c(70.093458, 41.82857, 36.111111, 63.26531, 47.88494, 52.22382, 62.686567, 52.785146, 16.883117, 66.30934, 71.681416, 53.33333, 45.34161, 51.213873, 41.9, 20.459290, 29.333333),
    theta = c("Goals scored or allowed", "Goals per shot taken", "Goals per shot on target", "Average shot distance from the goal", "Total passes completed", "Total passes attempted", "Passes directly leading to goals", "Passes into the penalty area", "Completed crosses into the penalty area", "Actions creating shot attempts", "Actions leading to goals scored", "Goal-creating actions through dribbles", "Instances of pressuring opponents", "Attempted dribbles", "Percentage of successful dribbles", "Number of times fouled", "Percentage of aerial duels won"),
    name = 'Mohamed Salah',
    mode = 'lines+markers',
    visible = 'legendonly'
  ) 

fig <- fig %>%
  add_trace(
    r = c(100.000000, 56.00000, 52.777778, 51.42857, 30.45685, 33.71593, 13.432836, 25.198939, 5.844156, 48.69832, 40.707965, 10.00000, 30.40373, 23.005780, 52.3, 28.183716, 65.33333),
    theta = c("Goals scored or allowed", "Goals per shot taken", "Goals per shot on target", "Average shot distance from the goal", "Total passes completed", "Total passes attempted", "Passes directly leading to goals", "Passes into the penalty area", "Completed crosses into the penalty area", "Actions creating shot attempts", "Actions leading to goals scored", "Goal-creating actions through dribbles", "Instances of pressuring opponents", "Attempted dribbles", "Percentage of successful dribbles", "Number of times fouled", "Percentage of aerial duels won"),
    name = 'Robert Lewandowski',
    mode = 'lines+markers',
    visible = 'legendonly'
  ) 

fig <- fig %>%
  add_trace(
    r = c(87.850467, 45.48571, 47.222222, 63.26531, 62.09814, 62.26686, 62.686567, 77.453581, 9.090909, 66.003063, 64.601770, 46.66667, 28.13665, 19.653179, 71.4, 8.768267, 40.00000),
    theta = c("Goals scored or allowed", "Goals per shot taken", "Goals per shot on target", "Average shot distance from the goal", "Total passes completed", "Total passes attempted", "Passes directly leading to goals", "Passes into the penalty area", "Completed crosses into the penalty area", "Actions creating shot attempts", "Actions leading to goals scored", "Goal-creating actions through dribbles", "Instances of pressuring opponents", "Attempted dribbles", "Percentage of successful dribbles", "Number of times fouled", "Percentage of aerial duels won"),
    name = 'Karim Benzema',
    mode = 'lines+markers',
    visible = 'legendonly'
  ) 

fig <- fig %>%
  add_trace(
    r = c(84.112150, 52.45714, 50.000000, 61.22449, 39.08629, 42.18077, 10.447761, 14.854111, 4.545455, 35.68147, 41.592920, 33.33333, 46.89441, 16.531792, 34.9, 28.39248, 31.200000),
    theta = c("Goals scored or allowed", "Goals per shot taken", "Goals per shot on target", "Average shot distance from the goal", "Total passes completed", "Total passes attempted", "Passes directly leading to goals", "Passes into the penalty area", "Completed crosses into the penalty area", "Actions creating shot attempts", "Actions leading to goals scored", "Goal-creating actions through dribbles", "Instances of pressuring opponents", "Attempted dribbles", "Percentage of successful dribbles", "Number of times fouled", "Percentage of aerial duels won"),
    name = 'Ciro Immobile',
    mode = 'lines+markers',
    visible = 'legendonly'
  ) 

fig <- fig %>%
  add_trace(
    r = c(83.177570, 61.48571, 72.222222, 57.14286, 29.61083, 34.57676, 26.865672, 27.320955, 0.000000, 36.44717, 40.707965, 23.33333, 52.17391, 25.086705, 41.0, 17.745303, 35.20000),
    theta = c("Goals scored or allowed", "Goals per shot taken", "Goals per shot on target", "Average shot distance from the goal", "Total passes completed", "Total passes attempted", "Passes directly leading to goals", "Passes into the penalty area", "Completed crosses into the penalty area", "Actions creating shot attempts", "Actions leading to goals scored", "Goal-creating actions through dribbles", "Instances of pressuring opponents", "Attempted dribbles", "Percentage of successful dribbles", "Number of times fouled", "Percentage of aerial duels won"),
    name = 'Wissam Ben Yedder',
    mode = 'lines+markers',
    visible = 'legendonly'
  ) 

fig <- fig %>%
  add_trace(
    r = c(0.000000, 0.000000, 0.000000, 68.16327, 32.31810, 40.17217, 0.000000, 18.832891, 23.376623, 38.28484, 0.000000, 0.00000, 63.66460, 20.693642, 60.0, 29.853862, 30.800000),
    theta = c("Goals scored or allowed", "Goals per shot taken", "Goals per shot on target", "Average shot distance from the goal", "Total passes completed", "Total passes attempted", "Passes directly leading to goals", "Passes into the penalty area", "Completed crosses into the penalty area", "Actions creating shot attempts", "Actions leading to goals scored", "Goal-creating actions through dribbles", "Instances of pressuring opponents", "Attempted dribbles", "Percentage of successful dribbles", "Number of times fouled", "Percentage of aerial duels won"),
    name = 'Przemysław Płacheta',
    mode = 'lines+markers',
    visible = 'legendonly'
  ) 

fig <- fig %>%
  add_trace(
    r = c(0.000000, 0.000000, 0.000000, 63.67347, 18.78173, 24.67719, 17.910448, 19.628647, 0.000000, 37.82542, 22.123894, 0.00000, 72.98137, 25.664740, 33.3, 30.897704, 47.33333),
    theta = c("Goals scored or allowed", "Goals per shot taken", "Goals per shot on target", "Average shot distance from the goal", "Total passes completed", "Total passes attempted", "Passes directly leading to goals", "Passes into the penalty area", "Completed crosses into the penalty area", "Actions creating shot attempts", "Actions leading to goals scored", "Goal-creating actions through dribbles", "Instances of pressuring opponents", "Attempted dribbles", "Percentage of successful dribbles", "Number of times fouled", "Percentage of aerial duels won"),
    name = 'Dickson Abiama',
    mode = 'lines+markers',
    visible = 'legendonly'
  ) 

fig <- fig %>%
  add_trace(
    r = c(0.000000, 0.000000, 0.000000, 58.77551, 21.15059, 27.40316, 26.865672, 18.567639, 0.000000, 34.915773, 30.973451, 0.00000, 33.22981, 20.231214, 80.0, 32.985386, 51.60000),
    theta = c("Goals scored or allowed", "Goals per shot taken", "Goals per shot on target", "Average shot distance from the goal", "Total passes completed", "Total passes attempted", "Passes directly leading to goals", "Passes into the penalty area", "Completed crosses into the penalty area", "Actions creating shot attempts", "Actions leading to goals scored", "Goal-creating actions through dribbles", "Instances of pressuring opponents", "Attempted dribbles", "Percentage of successful dribbles", "Number of times fouled", "Percentage of aerial duels won"),
    name = 'Carlos Bacca',
    mode = 'lines+markers',
    visible = 'legendonly'
  ) 

fig <- fig %>%
  add_trace(
    r = c(0.000000, 0.000000, 0.000000, 78.36735, 50.59222, 52.51076, 40.298507, 14.323607, 9.090909, 47.62634, 47.787611, 46.66667, 27.26708, 73.410405, 51.1, 33.82046, 22.266667),
    theta = c("Goals scored or allowed", "Goals per shot taken", "Goals per shot on target", "Average shot distance from the goal", "Total passes completed", "Total passes attempted", "Passes directly leading to goals", "Passes into the penalty area", "Completed crosses into the penalty area", "Actions creating shot attempts", "Actions leading to goals scored", "Goal-creating actions through dribbles", "Instances of pressuring opponents", "Attempted dribbles", "Percentage of successful dribbles", "Number of times fouled", "Percentage of aerial duels won"),
    name = 'Jeremie Boga',
    mode = 'lines+markers',
    visible = 'legendonly'
  ) 

fig <- fig %>%
  add_trace(
    r = c(0.000000, 0.000000, 0.000000, 72.24490, 23.18105, 30.27260, 0.000000, 31.564987, 35.714286, 37.97856, 0.000000, 0.00000, 68.01242, 25.433526, 54.2, 9.603340, 18.13333),
    theta = c("Goals scored or allowed", "Goals per shot taken", "Goals per shot on target", "Average shot distance from the goal", "Total passes completed", "Total passes attempted", "Passes directly leading to goals", "Passes into the penalty area", "Completed crosses into the penalty area", "Actions creating shot attempts", "Actions leading to goals scored", "Goal-creating actions through dribbles", "Instances of pressuring opponents", "Attempted dribbles", "Percentage of successful dribbles", "Number of times fouled", "Percentage of aerial duels won"),
    name = 'Mitchell van Bergen',
    mode = 'markers',
    visible = 'legendonly'
  ) 

fig <- fig %>%
  layout(
    polar = list(
      radialaxis = list(
        visible = T,
        range = c(0,100)
      )
    ),
    title = "Comparison of the best and worst Goals in each league in key statistics"
  )

fig
```

::: {.collapse-important collapse=TRUE}
## Correction to the dataset
Some of those players had 0 goals scored but a positive value on goals per shot %, we attributed that to an error in the dataset and manually corrected the values to keep a logical graph.
:::

## 3.3 EDA Demographic and economic data

### 3.3.1 Number of players by country of origin 2020/2021

[*Hover to see the values*]{.smallcaps}

```{r barplot all, echo=T}

demo_clean <- read.csv("data/luca/demo_clean.csv")
data <- demo_clean$Country.Name
agg_data <- aggregate(count ~ Country.Name, data = data.frame(Country.Name = data, count = 1), FUN = length)
sorted_agg_data <- agg_data[order(agg_data$count, decreasing = TRUE), ]
top_fifteen <- head(sorted_agg_data[order(sorted_agg_data$count, decreasing = FALSE), ], 57)

sorted_agg_data$TopFifteen <- ifelse(sorted_agg_data$Country.Name %in% top_fifteen$Country.Name, sorted_agg_data$Country.Name, "Other")

sorted_agg_data <- sorted_agg_data[order(sorted_agg_data$count, decreasing = FALSE), ]

hover_text <- paste("Country: ", sorted_agg_data$Country.Name, "<br>",
                    "Players: ", sorted_agg_data$count)

plotly::plot_ly(x = sorted_agg_data$Country.Name, y = sorted_agg_data$count, type = "bar",
                marker = list(color = ifelse(sorted_agg_data$TopFifteen == "Other", "skyblue", "grey"),
                              line = list(color = "black", width = 1))) %>%
  plotly::layout(title = "Frequency of Country of origin 2021-2022",
                 xaxis = list(title = "Country of origin", tickangle = 45, categoryorder = "array", categoryarray = sorted_agg_data$Country.Name),
                 yaxis = list(title = "Number of players"))
```

### 3.3.2 Top 15 countries

In this graph, we've emphasized the top fifteen countries based on the origins of selected football players. A significant observation is that the top five countries listed align precisely with those hosting Europe's most prestigious football leagues, often referred to as the 'Big Five'.

[*Hover to see the values*]{.smallcaps}

```{r barplot biggest 15,echo=T}
demo_clean <- read.csv("data/luca/demo_clean.csv")
data <- demo_clean$Country.Name
agg_data <- aggregate(count ~ Country.Name, data = data.frame(Country.Name = data, count = 1), FUN = length)
sorted_agg_data <- agg_data[order(agg_data$count, decreasing = TRUE), ]
top_fifteen <- sorted_agg_data$Country.Name[15:1]
filtered_data <- sorted_agg_data[sorted_agg_data$Country.Name %in% top_fifteen, ]
hover_text <- paste("Country: ", filtered_data$Country.Name, "<br>",
                    "Frequency: ", filtered_data$count)
plotly::plot_ly(x = filtered_data$Country.Name, y = filtered_data$count, type = "bar",
                marker = list(color = "skyblue", line = list(color = "black", width = 1)),
                 hoverinfo = hover_text) %>%
  plotly::layout(title = "Frequency of Country of origin 2021-2022 (Top Fifteen)",
                 xaxis = list(title = "Country of origin", tickangle = 45, categoryorder = "array", categoryarray = top_fifteen),
                 yaxis = list(title = "Frequency"))
```

### 3.3.3 Heatmap of evolution in demographic composition of players by nation.

The map illustrates the demographic evolution from 1990 to 2022 for the country of origin of the selected players. However, during the creation process, we encountered challenges due to inconsistent data encoding. Some values were represented as numeric ('num') while others were recognized as characters ('cha'). This discrepancy arose because we utilized an apostrophe to denote thousands in our datasets, enhancing readability but causing varied data recognition.

Despite the passage of over three decades, the demographic landscape between 1990 and 2022 remained relatively stable, especially in Europe. However, noteworthy changes were observed in South America and West Africa, where shifts in population dynamics were more prominent.

Interestingly, the graph presents a compelling observation: while certain countries boast larger populations, this doesn't inherently translate to a higher number of high-performing players in football. Factors beyond population size impact a country's ability to produce elite-level football talent. This observation challenges the assumption of a direct correlation between population size and success in the realm of professional football.

[*Hover to see the values*]{.smallcaps}

```{r Heatmap,echo=T,error=FALSE}
population_data <- read.csv("data/luca/demo_clean.csv", stringsAsFactors = FALSE)
population_data <- population_data[, c("Country.Name", "Country.Code", paste0("pop", 1990:2022))]
population_data <- population_data[!duplicated(population_data$Country.Name), c("Country.Name", "Country.Code", paste0("pop", 1990:2022))]
population_data <- population_data[population_data$Country.Name != "China", ] 
columns_to_convert_pop <- paste0("pop", 1990:2022)

for (col in columns_to_convert_pop) {
  population_data[[col]] <- as.numeric(gsub("'", "", as.character(population_data[[col]])))
}

for (col in columns_to_convert_pop) {
  population_data[[col]] <- as.numeric(as.character(population_data[[col]]))
}


population_data_long <- population_data %>%
  tidyr::gather(key = "Year", value = "Population", -Country.Name, -Country.Code) %>%
  mutate(Year = gsub("pop", "", Year),  
         Year = as.numeric(Year))  


world_map <- map_data("world")

new_zmin <- floor(min(population_data_long$Population) / 25000000) * 25000000
new_zmax <- ceiling(max(population_data_long$Population) / 25000000) * 25000000
plot_ly() %>%
  add_trace(
    data = world_map %>% filter(region != "USA"),  
    type = "scattergeo",
    locations = ~region,
    z = ~NA,
    text = ~region,
    mode = "text",
    hoverinfo = "text",
    showlegend = FALSE
  ) %>%
  add_trace(
    data = world_map %>% filter(region != "USA"), 
    type = "scattergeo",
    locations = ~c(long, lat),
    mode = "lines",
    line = list(color = "black", width = 0.5),
    showlegend = FALSE
  ) %>%
  add_trace(
    data = population_data_long,
    type = "choropleth",
    locations = ~Country.Code,
    z = ~Population,
      zmin = new_zmin,  
    zmax = new_zmax,  
    colorscale = list(
      c(0, "rgb(0, 255, 0)"),  
      c(0.2, "rgb(255, 255, 0)"),  
      c(0.4, "rgb(255, 165, 0)"),  
      c(0.6, "rgb(255, 69, 0)"),  
      c(0.8, "rgb(255, 0, 0)"),  
      c(1, "rgb(139, 0, 0)")  

   ),
    text = ~paste("Country: ", Country.Name, "<br>Population: ", Population),
    colorbar = list(title = "Population"),
    showlegend = FALSE
  ) %>%
  layout(
    title = "Evolution in demographic composition of players by nation ",
    geo = list(
      showframe = FALSE,
      showcoastlines = TRUE,
      projection = list(type = "mercator")
    ),
    sliders = list(
      list(
        active = 10,
        steps = lapply(unique(population_data_long$Year), function(year) {
          list(
            method = "restyle",
            args = list("z", list(population_data_long$Population[population_data_long$Year == year])),
            label = year
          )
        })
      )
    )
  )

```

::: {.callout-important collapse="true"}
## Why is China not present ?
The presence of China on the map, with its massive population of approximately 1.4 billion inhabitants, was disproportionately affecting the color scale, providing less informative visualization than desired. Therefore, we made the decision to remove China from the map to emphasize and prioritize Europe, where the Big Five leagues are predominantly located. This adjustment aimed to better highlight and focus on the regions pertinent to our analysis.
:::

### 3.3.4  Country of origin GDP per capita between 1990 and 2020 .

"This Shiny app showcases the GDP per capita of the countries from which the selected players originate. Notably, the countries hosting the Big Five leagues are highlighted in red, making them easily distinguishable.

In general, the United Kingdom and Germany consistently rank higher than their European counterparts in GDP per capita, while Spain consistently ranks lower among them. However, within a European context, all these countries maintain relatively high rankings reflecting varying degrees of economic stability and prosperity. It's important to note that events like the 2008 financial crisis had a notable impact on each country's overall GDP, contributing to a reduction in their economic metrics during that period.

While countries with high GDP rankings might possess considerable financial resources, the correlation between economic power and success in football doesn't always directly translate. Hosting major tournaments or producing a surplus of top players involves various factors beyond economic prowess.

[*Hover to see the values*]{.smallcaps}

```{r GDP per capita 1990-2020, echo=T,error=FALSE}
#| context: server
library(plotly)
gdpcut<- read.csv("data/luca/demo_clean.csv")
gdpcut <- gdpcut[, c("Country.Name", "Country.Code", paste0("X", 1990:2020))]
gdpcut_unique <- gdpcut[!duplicated(gdpcut$Country.Name), c("Country.Name", "Country.Code", paste0("X", 1990:2020))]

columns_to_convert <- paste0("X", 1990:2020)

for (col in columns_to_convert) {

  gdpcut_unique[[col]] <- as.numeric(gsub("'", "", as.character(gdpcut_unique[[col]])))
}


for (col in columns_to_convert) {
  gdpcut_unique[[col]] <- as.numeric(as.character(gdpcut_unique[[col]]))
}

gdp_data <- gdpcut_unique

ui <- fluidPage(
  titlePanel("GDP Data Exploration"),
  sidebarLayout(
    sidebarPanel(
      sliderInput("year", "Select Year", min = 1990, max = 2020, value = 1990)
    ),
    mainPanel(
      plotlyOutput("barplot", height = "600px", width = "800px")
    )
  )
)
server <- function(input, output) {


output$barplot <- renderPlotly({
  year_col <- paste0("X", input$year)
  gdp_subset <- gdp_data[, c("Country.Name", year_col)]
  gdp_subset <- gdp_subset[complete.cases(gdp_subset[[year_col]]), ]
  gdp_subset <- gdp_subset[order(-gdp_subset[[year_col]]), ]
  top_50 <- head(gdp_subset, 50)
  
  countries_to_highlight <- c("United Kingdom", "France", "Germany", "Spain", "Italy")
  
  p <- ggplot(top_50, aes(x = reorder(Country.Name, top_50[[year_col]]), y = top_50[[year_col]])) +
    geom_bar(stat = "identity", fill = ifelse(top_50$Country.Name %in% countries_to_highlight, "red", "skyblue")) +
    labs(title = paste("GDP per capita between 1990 and 2020", input$year),
         x = "Country", y = "GDP per capita in $") +
    theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
    coord_flip()
  
  ggplotly(p, tooltip = c("y")) %>%
    layout(hoverlabel = list(bgcolor = "white", bordercolor = "black", font = list(family = "Arial, sans-serif")))
})
}

shinyApp(ui = ui, server = server)


```

::: {.callout-tip}
## Key take aways

Success in football isn't exclusively linked to a country's physical size. Smaller countries can excel and compete at high levels, demonstrating that size doesn't necessarily limit a nation's footballing achievements.

High GDP alone doesn't guarantee footballing success. While wealthy nations might have resources, success in football relies on factors beyond economic strength, including infrastructure, coaching, youth development, and cultural emphasis on sports.

A competitive football environment fueled by robust infrastructure, effective grassroots programs, strong youth development systems, investment in training facilities, coaching quality, and a culture that values sports can significantly impact a country's footballing success.

These elements often transcend economic power alone and contribute significantly to nurturing talent and achieving success in the sport.

:::

## 3.4 EDA on Economic Information and League Characteristics

### 3.4.1 Count of players in the big five 2020/2021.

The distribution of players among the top five leagues shows a relatively even spread, with the Premier League leading by a narrow margin, closely followed by Ligue 1. We can observe that La Liga and the Bundesliga are equals with 69 players each

We could explain this because the Premier League's global appeal and financial strength have made it a magnet for talent worldwide. Meanwhile, Ligue 1's emphasis on skill development and nurturing young players has propelled it to a close second position.

[*Hover to see the values*]{.smallcaps}

```{r répartion club, echo=T}
plot_player_distribution <- function(player_data) {
  player_data <- player_data[order(player_data$players), ]  
  player_data$league <- factor(player_data$league, levels = player_data$league)
  

  my_colors <- c("#2ca02c", "#ff7f0e", "#d62728", "#9467bd", "#1f77b4")
  
  p <- ggplot(player_data, aes(x = reorder(league, players), y = players, fill = league, text = paste("League: ", league, "<br>Players: ", players))) +
    geom_bar(stat = "identity", color = "black", alpha = 1, show.legend = TRUE, width = 0.5) +
    scale_fill_manual(values = my_colors) +  
    labs(title = "Distribution of  Players in the Big Five ",
         x = "League",
         y = "Number of Players") +
    theme_minimal()
  
  ggplotly(p, tooltip = "text")
}

combined_data <- data.frame(
  league = c("Premier League", "La Liga", "Serie A", "Bundesliga", "Ligue 1"),
  players = c(85, 69, 80, 69, 84)
)

plot_player_distribution(combined_data)
```

### 3.4.2 number of players per team

[*Hover to see the values*]{.smallcaps}

```{r number of players per team, echo=T}
team_counts_pl <- premier_league_players %>%
  group_by(Squad) %>%
  summarise(Count = n()) %>%
  arrange(Count)

plot_teams <- plot_ly(data = team_counts_pl, x = ~Squad, y = ~Count, type = "bar") %>%
  layout(title = "Number of players per team in the Premier League",
         xaxis = list(title = "Squad"),
         yaxis = list(title = "Number of players"))

team_counts_bundesliga <- bundesliga_players %>%
  group_by(Squad) %>%
  summarise(Count = n()) %>%
  arrange(Count)

plot_teams_bundes <- plot_ly(data = team_counts_bundesliga, x = ~Squad, y = ~Count, type = "bar") %>%
  layout(title = "Number of players per team in the Bundesliga",
         xaxis = list(title = "Squad"),
         yaxis = list(title = "Number of players"))

team_counts_la_liga <- la_liga_players %>%
  group_by(Squad) %>%
  summarise(Count = n()) %>%
  arrange(Count)

plot_teams_la_liga <- plot_ly(data = team_counts_la_liga, x = ~Squad, y = ~Count, type = "bar") %>%
  layout(title = "Number of players per team in La Liga",
         xaxis = list(title = "Squad"),
         yaxis = list(title = "Number of players"))

team_counts_serie_a <- serie_a_players %>%
  group_by(Squad) %>%
  summarise(Count = n()) %>%
  arrange(Count)

plot_teams_serie_a <- plot_ly(data = team_counts_serie_a, x = ~Squad, y = ~Count, type = "bar") %>%
  layout(title = "Number of players per team in Serie A",
         xaxis = list(title = "Squad"),
         yaxis = list(title = "Number of players"))

team_counts_ligue_1 <- ligue_1_players %>%
  group_by(Squad) %>%
  summarise(Count = n()) %>%
  arrange(Count)

plot_teams_ligue_1 <- plot_ly(data = team_counts_ligue_1, x = ~Squad, y = ~Count, type = "bar") %>%
  layout(title = "Number of players per team in Ligue 1",
         xaxis = list(title = "Squad"),
         yaxis = list(title = "Number of players"))

subplot(plot_teams, plot_teams_bundes, plot_teams_la_liga, plot_teams_serie_a, plot_teams_ligue_1, nrows = 3) %>%
  layout(updatemenus = list(
    list(
      buttons = list(
        list(args = list("visible", list(TRUE, FALSE, FALSE, FALSE, FALSE)),
             label = "Premier League", method = "restyle"),
        list(args = list("visible", list(FALSE, TRUE, FALSE, FALSE, FALSE)),
             label = "Bundesliga", method = "restyle"),
        list(args = list("visible", list(FALSE, FALSE, TRUE, FALSE, FALSE)),
             label = "La Liga", method = "restyle"),
        list(args = list("visible", list(FALSE, FALSE, FALSE, TRUE, FALSE)),
             label = "Serie A", method = "restyle"),
        list(args = list("visible", list(FALSE, FALSE, FALSE, FALSE, TRUE)),
             label = "Ligue 1", method = "restyle")
      ),
      x = 0.1,
      xanchor = "left",
      y = 1.2,
      yanchor = "top",
      showactive = FALSE
    )
  )) %>%
  layout(
    title = "Number of players per team in Big Five",
    xaxis = list(title = "Squad"),
    yaxis = list(title = "Number of players")
  ) %>%
  config(displayModeBar = FALSE) %>%
  layout(showlegend = FALSE)
 

```

### 3.4.3 Evolution of economic evaluation of Big five between 2012-2024 in Europe in euros.

This point plot provides an economic evaluation of the Big Five leagues spanning from 2012 to 2024. Notably, the Premier League emerges as a standout performer, displaying a remarkable trend of nearly 50% higher valuation than the second-ranking league in 2012. This difference continues to widen, reaching an almost 80% lead by 2024, underlining the Premier League's consistent financial dominance.

Conversely, the trajectories of the other four leagues showcase a paired evolution: the Bundesliga closely aligns with La Liga, while Ligue 1 tracks a similar trajectory to Serie A.

What's particularly striking is the visible rebound after the COVID-19 impact in 2021-2022. The reintroduction of fans to stadiums resulted in a notable resurgence in matchday revenues for all leagues. This recovery highlights the crucial role of spectator presence in driving revenue growth especially for the Premier League.

[*Hover to see the values*]{.smallcaps}

```{r revenu big 5, echo=T}
Bundesliga <- c("2.018", "2.275", "2.392", "2.712", "2.793", "3.168", "3.345", "3.208", "3.005", "3.149", "3.550", "3.450")
SerieA <- c("1.677", "1.700", "1.790", "1.917", "2.062", "2.239", "2.495", "2.057", "2.521", "2.350", "2.600", "2.050")
LaLiga <- c("1.868", "1.933", "2.053", "2.437", "2.865", "3.073", "3.378", "3.114", "2.953", "3.277", "3.300", "3.400")
Ligue1 <- c("1.297", "1.498", "1.418", "1.485", "1.643", "1.692", "1.902", "1.598", "1.614", "2.026", "2.100", "2.050")
Premierleague <- c("2.946", "3.897", "4.403", "4.865", "5.301", "5.440", "5.843", "5.123", "5.498", "6.442", "6.605", "6.662")
Dates <- c("2012-2013", "2013-2014", "2014-2015", "2015-2016", "2016-2017", "2017-2018", "2018-2019", "2019-2020", "2020-2021", "2021-2022", "2022-2023", "2023-2024")

Bundesliga <- as.numeric(Bundesliga)
SerieA <- as.numeric(SerieA)
LaLiga <- as.numeric(LaLiga)
Ligue1 <- as.numeric(Ligue1)
Premierleague <- as.numeric(Premierleague)

data <- data.frame(
  Dates = Dates,
  Bundesliga = Bundesliga,
  SerieA = SerieA,
  LaLiga = LaLiga,
  Ligue1 = Ligue1,
  Premierleague = Premierleague
) 

data$Dates <- factor(data$Dates, levels = Dates)
data_melted <- melt(data, id.vars = "Dates") 

p <- ggplot(data_melted, aes(x = Dates, y = value, color = variable, group = variable)) +
  geom_line() +  
  geom_point() +
  labs(
    title = "Big 5 value comparison",
    x = "Season",
    y = "Value in billions"
  ) +
  scale_color_manual(values = c("Bundesliga" = "#ff7f0e", "SerieA" = "#d62728", "LaLiga" = "#2ca02c", "Ligue1" = "#9467bd", "Premierleague" = "#1f77b4")) +
  theme_minimal() +
  theme(legend.position = "top")

ggplotly(p, tooltip = c("", "value")) 

```

### 3.4.4 Comparison of **revenue from broadcasting rights of European soccer leagues in 2019/20.**

This pie chart represents the broadcasting rights revenue of European soccer leagues in the 2019/20 season. Notably, the Premier League maintains its leading position, showcasing its economic supremacy by holding a 12% greater share of the market revenue during this period.

Aligned with the earlier analysis, the proximity of La Liga and Bundesliga, as well as the lag exhibited by Serie A and Ligue 1, is consistent with their standings in the previous analysis. These outcomes reaffirm the significance of TV rights in determining the overall revenue of football leagues.

The dominance of the Premier League in broadcasting rights revenue underscores its popularity and market appeal, translating directly into substantial financial gains.

[*Hover to see the values*]{.smallcaps}

```{r fpie tv,echo=T}

tv <- tibble(
  `Comp` = c("Premier League", "La Liga", "Bundesliga", "Serie A", "Ligue 1"),
  `Revenue` = c(2.669, 1.711, 1.489, 1.190, 0.690)
)

tv$percent <- tv$Revenue / sum(tv$Revenue) * 100
data <- data.frame("Categorie" = tv$Comp, "X1960" = tv$Revenue)
colors <- c('#1f77b4', '#2ca02c', '#ff7f0e', '#d62728', '#9467bd')
fig <- plot_ly(data, labels = ~Categorie, values = ~X1960, type = 'pie',
               textposition = 'inside',
               textinfo = 'label+percent',
               insidetextfont = list(color = '#FFFFFF', size = 14),
               hoverinfo = 'text',  
               text = ~paste(tv$Comp, '<br>', 'Revenue: euros', X1960, 'B', '<br>', round(tv$percent, 2), '%'),
               marker = list(colors = colors,
                             line = list(color = '#FFFFFF', width = 1)),
               showlegend = FALSE)
fig <- fig %>% layout(title = list(text = 'TV Revenue by League in 2021/2022', font = list(size = 20)),
                      xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
                      yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
                      paper_bgcolor = '#F5F5F5', 
                      plot_bgcolor = '#F5F5F5'   
)
fig
```

::: {.callout-tip}
## Key take aways

1.  **Premier League Dominance:** The Premier League consistently stands out in terms of economic superiority across multiple financial evaluations.

2.  **Bundled Pairing:** La Liga and Bundesliga exhibit close proximity in financial evaluations, suggesting a comparable performance in revenue streams, including broadcasting rights.

3.  **Serie A and Ligue 1 Lag:** Serie A and Ligue 1 consistently trail behind the Premier League, La Liga, and Bundesliga in financial assessments.

4.  **Impact of Broadcasting Rights:** The significance of TV rights in shaping the revenue of football leagues is evident. Leagues with a stronger hold on broadcasting rights tend to fare better financially, highlighting the critical role of media and the following of good players.

:::
