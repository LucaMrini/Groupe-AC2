```{r, echo = FALSE, message = FALSE}
source(here::here("scripts/setup.R"))
```

# 3 EDA

## 3.1 EDA Ballon d'or

```         
```

## 3.2 EDA Skillc

### 3.2.1 Aggregation of data for counts by position (rename the legend )

```{r Aggregation of data for counts by position, echo=TRUE}
library(ggplot2)
library(dplyr)
library(plotly)

data1 <- read.csv("data1ned.csv")

data1 %>%
  count(Pos) %>%
  mutate(Pos = factor(Pos, levels = Pos[order(n)])) %>%
  ggplot(aes(x = Pos, y = n, fill = Pos, text = paste("Number of players: ", n))) +
  geom_bar(stat = "identity") +
  labs(title = "The Forward position is the most representative of the attacking positions",
       x = "Position",
       y = "Number of players") + 
  scale_fill_manual(values = c("#FF6F61", "#6B5B95", "#88B04B")) + 
  theme_minimal() -> p

ggplotly(p, tooltip = "text")

```

### 3.2.2 Number of players per team in the big 5

```{r number of players per team, echo=TRUE}

team_counts_pl <- premier_league_players %>%
  group_by(Squad) %>%
  summarise(Count = n()) %>%
  arrange(Count) 

# Create an interactive graphic for Premier League
plot_teams <- plot_ly(data = team_counts_pl, x = ~Squad, y = ~Count, type = "bar") %>%
  layout(title = "Number of players per team in the Premier League",
         xaxis = list(title = "Squad"),
         yaxis = list(title = "Number of players"))

# Bundesliga
team_counts_bundesliga <- bundesliga_players %>%
  group_by(Squad) %>%
  summarise(Count = n()) %>%
  arrange(Count) 

# Create an interactive graphic for Bundesliga
plot_teams_bundes <- plot_ly(data = team_counts_bundesliga, x = ~Squad, y = ~Count, type = "bar") %>%
  layout(title = "Number of players per team in the Bundesliga",
         xaxis = list(title = "Squad"),
         yaxis = list(title = "Number of players"))

# La Liga
team_counts_la_liga <- la_liga_players %>%
  group_by(Squad) %>%
  summarise(Count = n()) %>%
  arrange(Count) 

# Create an interactive graphic for La Liga
plot_teams_la_liga <- plot_ly(data = team_counts_la_liga, x = ~Squad, y = ~Count, type = "bar") %>%
  layout(title = "Number of players per team in La Liga",
         xaxis = list(title = "Squad"),
         yaxis = list(title = "Number of players"))

# Serie A
team_counts_serie_a <- serie_a_players %>%
  group_by(Squad) %>%
  summarise(Count = n()) %>%
  arrange(Count) 

# Create an interactive graphic for Serie A
plot_teams_serie_a <- plot_ly(data = team_counts_serie_a, x = ~Squad, y = ~Count, type = "bar") %>%
  layout(title = "Number of players per team in Serie A",
         xaxis = list(title = "Squad"),
         yaxis = list(title = "Number of players"))

# Ligue 1
team_counts_ligue_1 <- ligue_1_players %>%
  group_by(Squad) %>%
  summarise(Count = n()) %>%
  arrange(Count) 

# Create an interactive graphic for Ligue 1
plot_teams_ligue_1 <- plot_ly(data = team_counts_ligue_1, x = ~Squad, y = ~Count, type = "bar") %>%
  layout(title = "Number of players per team in Ligue 1",
         xaxis = list(title = "Squad"),
         yaxis = list(title = "Number of players"))

# Combine 5 graphics into 1
subplot(plot_teams, plot_teams_bundes, plot_teams_la_liga, plot_teams_serie_a, plot_teams_ligue_1, nrows = 3) %>%
  layout(updatemenus = list(
    list(
      buttons = list(
        list(args = list("visible", list(TRUE, FALSE, FALSE, FALSE, FALSE)),
             label = "Premier League", method = "restyle"),
        list(args = list("visible", list(FALSE, TRUE, FALSE, FALSE, FALSE)),
             label = "Bundesliga", method = "restyle"),
        list(args = list("visible", list(FALSE, FALSE, TRUE, FALSE, FALSE)),
             label = "La Liga", method = "restyle"),
        list(args = list("visible", list(FALSE, FALSE, FALSE, TRUE, FALSE)),
             label = "Serie A", method = "restyle"),
        list(args = list("visible", list(FALSE, FALSE, FALSE, FALSE, TRUE)),
             label = "Ligue 1", method = "restyle")
      ),
      x = 0.1,
      xanchor = "left",
      y = 1.2,
      yanchor = "top",
      showactive = FALSE
    )
  )) %>%
  layout(
    title = "Number of players per team in different leagues",
    xaxis = list(title = "Squad"),
    yaxis = list(title = "Number of players")
  ) %>%
  config(displayModeBar = FALSE) %>%
  layout(showlegend = FALSE)  
```

### 3.2.3 top 10 players per league (goals per 90min)

####       3.2.3.1 Premier league

```{r Top 10 Premier League,echo=TRUE}

top_players_plot <- premier_league_players %>%
  top_n(10, Goals) %>%
  arrange(desc(Goals)) %>%
  plot_ly(x = ~reorder(Player, Goals), y = ~Goals, type = "bar", marker = list(color = "skyblue", opacity = 0.7)) %>%
  layout(
    title = "Mohamed Salah and Jamie Vardy top the Premier League scoring charts",
    xaxis = list(title = "Player", categoryorder = "total ascending"),
    yaxis = list(title = "Goals per 90 min"),
    showlegend = FALSE
  )

top_players_plot

```

####           3.2.3.2 Bundesliga

```{r top 10 Bundesliga,echo=TRUE}

top_bundesliga_players <- bundesliga_players %>%
  top_n(10, Goals) %>%
  arrange(desc(Goals))

top_bundesliga_plot <- top_bundesliga_players %>%
  plot_ly(x = ~reorder(Player, Goals), y = ~Goals, type = "bar", marker = list(color = "blue", opacity = 0.7)) %>%
  layout(title = "Robert Lewandowski alone at the top of the best Goals ranking",
         xaxis = list(title = "Player"),
         yaxis = list(title = "Goals per 90 min"),
         showlegend = FALSE) %>%
  layout(xaxis = list(categoryorder = "total ascending"))

top_bundesliga_plot
```

####           3.2.3.3  La Liga

```{r top 10 statistical goals in La Liga,echo=TRUE}

top_la_liga_players <- la_liga_players %>%
  top_n(10, Goals) %>%
  arrange(desc(Goals))

top_la_liga_plot <- top_la_liga_players %>%
  plot_ly(x = ~reorder(Player, Goals), y = ~Goals, type = "bar", marker = list(color = "red", opacity = 0.7)) %>%
  layout(title = "Karim Benzema is the most successful per 90 minutes in the Spanish league",
         xaxis = list(title = "Player"),
         yaxis = list(title = "Goals per 90 min"),
         showlegend = FALSE) %>%
  layout(xaxis = list(categoryorder = "total ascending"))

top_la_liga_plot
```

####           3.2.3.4 Serie A

```{r 10 best Goal statistics in Serie A, echo= TRUE }

top_serie_a_players <- serie_a_players %>%
  top_n(10, Goals) %>%
  arrange(desc(Goals))

top_serie_a_plot <- top_serie_a_players %>%
  plot_ly(x = ~reorder(Player, Goals), y = ~Goals, type = "bar", marker = list(color = "orange", opacity = 0.7)) %>%
  layout(title = "Ciro Immobile, at the top of Serie A",
         xaxis = list(title = "Player"),
         yaxis = list(title = "Goals per 90 min"),
         showlegend = FALSE) %>%
  layout(xaxis = list(categoryorder = "total ascending"))

top_serie_a_plot
```

#### 3.2.3.5 Ligue 1

```{r 10 best  in Ligue 1, echo=TRUE}

top_ligue_1_players <- ligue_1_players %>%
  top_n(10, Goals) %>%
  arrange(desc(Goals))

top_ligue_1_plot <- top_ligue_1_players %>%
  plot_ly(x = ~reorder(Player, Goals), y = ~Goals, type = "bar", marker = list(color = "#FFD700", opacity = 1)) %>%
  layout(title = "Wissam Ben Yedder has the best Goals statistic in Ligue 1",
         xaxis = list(title = "Player"),
         yaxis = list(title = "GGoals per 90 min"),
         showlegend = FALSE) %>%
  layout(xaxis = list(categoryorder = "total ascending"))

top_ligue_1_plot
```

### 3.2.4 Combined graph for age distribution

```{r graph for age distribution, echo=TRUE}

library(plotly)

create_histogram_with_average <- function(data, title, color) {
  avg_age <- mean(data$Age)
  plot <- data %>%
    plot_ly(
      x = ~Age, 
      type = "histogram", 
      marker = list(color = color), 
      name = title, 
      hoverinfo = "x"
    ) %>%
    add_trace(
      x = c(avg_age, avg_age), 
      y = c(0, 30), 
      type = "scatter", 
      mode = "lines", 
      line = list(color = "green", width = 2), 
      name = "", 
      showlegend = FALSE
    ) %>%
    layout(
      title = title, 
      xaxis = list(title = "Age"), 
      yaxis = list(title = "Number of players")
    )
  return(plot)
}


plot_premier_league <- create_histogram_with_average(premier_league_players, "Premier League", "skyblue")
plot_bundesliga <- create_histogram_with_average(bundesliga_players, "Bundesliga", "blue")
plot_la_liga <- create_histogram_with_average(la_liga_players, "La Liga", "red")
plot_serie_a <- create_histogram_with_average(serie_a_players, "Serie A", "orange")
plot_ligue_1 <- create_histogram_with_average(ligue_1_players, "Ligue 1", "yellow")


subplot(
  plot_premier_league, 
  plot_bundesliga, 
  plot_la_liga, 
  plot_serie_a, 
  plot_ligue_1, 
  nrows = 3
) %>%
layout(
  updatemenus = list(
    list(
      buttons = list(
        list(
          args = list("visible", c(TRUE, FALSE, FALSE, FALSE, FALSE)),
          label = "Premier League", 
          method = "restyle"
        ),
        list(
          args = list("visible", c(FALSE, TRUE, FALSE, FALSE, FALSE)),
          label = "Bundesliga", 
          method = "restyle"
        ),
        list(
          args = list("visible", c(FALSE, FALSE, TRUE, FALSE, FALSE)),
          label = "La Liga", 
          method = "restyle"
        ),
        list(
          args = list("visible", c(FALSE, FALSE, FALSE, TRUE, FALSE)),
          label = "Serie A", 
          method = "restyle"
        ),
        list(
          args = list("visible", c(FALSE, FALSE, FALSE, FALSE, TRUE)),
          label = "Ligue 1", 
          method = "restyle"
        )
      ),
      x = 0.1,
      xanchor = "left",
      y = 1.2,
      yanchor = "top",
      showactive = FALSE
    )
  )
)

```

### 3.2.5 Combined graph for weight

```{r graph for weight,echo=TRUE}


plot_premier_league <- premier_league_players %>%
  plot_ly(x = ~Weight, type = "histogram", marker = list(color = "skyblue"), name = "Premier League") %>%
  layout(title = "Weight distribution of Premier League players",
         xaxis = list(title = "Weight"), yaxis = list(title = "Number of players"))

plot_bundesliga <- bundesliga_players %>%
  plot_ly(x = ~Weight, type = "histogram", marker = list(color = "blue"), name = "Bundesliga") %>%
  layout(title = "Weight distribution of Bundesliga players",
         xaxis = list(title = "Weight"), yaxis = list(title = "Number of players"))

plot_la_liga <- la_liga_players %>%
  plot_ly(x = ~Weight, type = "histogram", marker = list(color = "red"), name = "La Liga") %>%
  layout(title = "Weight distribution of La Liga players",
         xaxis = list(title = "Weight"), yaxis = list(title = "Number of players"))

plot_serie_a <- serie_a_players %>%
  plot_ly(x = ~Weight, type = "histogram", marker = list(color = "orange"), name = "Serie A") %>%
  layout(title = "Weight distribution of Serie A players",
         xaxis = list(title = "Weight"), yaxis = list(title = "Number of players"))

plot_ligue_1 <- ligue_1_players %>%
  plot_ly(x = ~Weight, type = "histogram", marker = list(color = "yellow"), name = "Ligue 1") %>%
  layout(title = "Weight distribution of players",
         xaxis = list(title = "Weight"), yaxis = list(title = "Number of players"))

# Function to create histogram with average line and modified hover for weight
create_histogram_weight_with_average <- function(data, title, color) {
  avg_weight <- mean(data$Weight)
  plot <- data %>%
    plot_ly(x = ~Weight, type = "histogram", marker = list(color = color), name = title, hoverinfo = "x+y") %>%
    add_trace(x = c(avg_weight, avg_weight), y = c(0, 30), type = "scatter", mode = "lines", line = list(color = "green", width = 2), name = "", showlegend = FALSE) %>%
    layout(title = title, xaxis = list(title = "Weight"), yaxis = list(title = "Number of players"))
  return(plot)
}

# Create individual weight plots with average lines and modified hover
plot_premier_league_weight <- create_histogram_weight_with_average(premier_league_players, "Premier League", "skyblue")
plot_bundesliga_weight <- create_histogram_weight_with_average(bundesliga_players, "Bundesliga", "blue")
plot_la_liga_weight <- create_histogram_weight_with_average(la_liga_players, "La Liga", "red")
plot_serie_a_weight <- create_histogram_weight_with_average(serie_a_players, "Serie A", "orange")
plot_ligue_1_weight <- create_histogram_weight_with_average(ligue_1_players, "Ligue 1", "yellow")

# Create subplot for player weight distribution
subplot(plot_premier_league_weight, plot_bundesliga_weight, plot_la_liga_weight, plot_serie_a_weight, plot_ligue_1_weight, nrows = 3) %>%
  layout(updatemenus = list(
    list(
      buttons = list(
        list(args = list("visible", c(TRUE, FALSE, FALSE, FALSE, FALSE)),
             label = "Premier League", method = "restyle"),
        list(args = list("visible", c(FALSE, TRUE, FALSE, FALSE, FALSE)),
             label = "Bundesliga", method = "restyle"),
        list(args = list("visible", c(FALSE, FALSE, TRUE, FALSE, FALSE)),
             label = "La Liga", method = "restyle"),
        list(args = list("visible", c(FALSE, FALSE, FALSE, TRUE, FALSE)),
             label = "Serie A", method = "restyle"),
        list(args = list("visible", c(FALSE, FALSE, FALSE, FALSE, TRUE)),
             label = "Ligue 1", method = "restyle")
      ),
      x = 0.1,
      xanchor = "left",
      y = 1.2,
      yanchor = "top",
      showactive = FALSE
    )
  ))

```

### 3.2.6 Combined chart for size

```{r Combined chart for size, echo=TRUE}
# Function to create histogram with average line, contour, and modified hover for height
create_histogram_height_with_average_contour <- function(data, title, color) {
  avg_height <- mean(data$Height)
  plot <- data %>%
    add_histogram(x = ~Height, histnorm = "probability density", marker = list(color = color), name = title,
                  hoverinfo = "x+y+text", text = ~paste("Players: ", round(y * length(data$Height)))) %>%
    add_trace(x = c(avg_height, avg_height), y = c(0, 1.1 * max(data$density)), type = "scatter", mode = "lines", line = list(color = "green", width = 2), name = "", showlegend = FALSE) %>%
    layout(title = title, xaxis = list(title = "Height"), yaxis = list(title = "Density"))
  return(plot)
}

# Create individual height plots with average lines
plot_premier_league_height <- create_histogram_height_with_average(premier_league_players, "Premier League", "skyblue")
plot_bundesliga_height <- create_histogram_height_with_average(bundesliga_players, "Bundesliga", "blue")
plot_la_liga_height <- create_histogram_height_with_average(la_liga_players, "La Liga", "red")
plot_serie_a_height <- create_histogram_height_with_average(serie_a_players, "Serie A", "orange")
plot_ligue_1_height <- create_histogram_height_with_average(ligue_1_players, "Ligue 1", "yellow")

# Combine height plots into a subplot layout with dropdown menu
subplot(plot_premier_league_height, plot_bundesliga_height, plot_la_liga_height, plot_serie_a_height, plot_ligue_1_height, nrows = 3) %>%
  layout(updatemenus = list(
    list(
      buttons = list(
        list(args = list("visible", c(TRUE, FALSE, FALSE, FALSE, FALSE)),
             label = "Premier League", method = "restyle"),
        list(args = list("visible", c(FALSE, TRUE, FALSE, FALSE, FALSE)),
             label = "Bundesliga", method = "restyle"),
        list(args = list("visible", c(FALSE, FALSE, TRUE, FALSE, FALSE)),
             label = "La Liga", method = "restyle"),
        list(args = list("visible", c(FALSE, FALSE, FALSE, TRUE, FALSE)),
             label = "Serie A", method = "restyle"),
        list(args = list("visible", c(FALSE, FALSE, FALSE, FALSE, TRUE)),
             label = "Ligue 1", method = "restyle")
      ),
      x = 0.1,
      xanchor = "left",
      y = 1.2,
      yanchor = "top",
      showactive = FALSE
    )
  ))

```

### 3.2.7 Comparison of the top 5 scorers and worst 5 Goals of each League (radar map problem with values , resume des values à gauche avec nom )

```{r Comparison of the top 5 scorers and worst 5 Goals of each League (radar map),echo=TRUE}

fig <- plot_ly(
  type = 'scatterpolar',
  fill = 'toself'
) 

fig <- fig %>%
  add_trace(
    r = c(70.093458, 41.82857, 36.111111, 63.26531, 47.88494, 52.22382, 62.686567, 52.785146, 16.883117, 66.30934, 71.681416, 53.33333, 45.34161, 51.213873, 41.9, 20.459290, 29.333333),
    theta = c("Goals", "G/Sh", "G/SoT", "ShoDist", "PasTotCmp", "PasTotAtt", "Assists", "PPA", "CrsPA", "SCA", "GCA", "GCADrib", "Press", "DriAtt", "DriSucc%", "Fld", "AerWon%"),
    name = 'Mohamed Salah',
    mode = 'lines+markers'
  ) 

fig <- fig %>%
  add_trace(
    r = c(100.000000, 56.00000, 52.777778, 51.42857, 30.45685, 33.71593, 13.432836, 25.198939, 5.844156, 48.69832, 40.707965, 10.00000, 30.40373, 23.005780, 52.3, 28.183716, 65.33333),
    theta = c("Goals", "G/Sh", "G/SoT", "ShoDist", "PasTotCmp", "PasTotAtt", "Assists", "PPA", "CrsPA", "SCA", "GCA", "GCADrib", "Press", "DriAtt", "DriSucc%", "Fld", "AerWon%"),
    name = 'Robert Lewandowski',
    mode = 'lines+markers'
  ) 

fig <- fig %>%
  add_trace(
    r = c(87.850467, 45.48571, 47.222222, 63.26531, 62.09814, 62.26686, 62.686567, 77.453581, 9.090909, 66.003063, 64.601770, 46.66667, 28.13665, 19.653179, 71.4, 8.768267, 40.00000),
    theta = c("Goals", "G/Sh", "G/SoT", "ShoDist", "PasTotCmp", "PasTotAtt", "Assists", "PPA", "CrsPA", "SCA", "GCA", "GCADrib", "Press", "DriAtt", "DriSucc%", "Fld", "AerWon%"),
    name = 'Karim Benzema',
    mode = 'lines+markers'
  ) 

fig <- fig %>%
  add_trace(
    r = c(84.112150, 52.45714, 50.000000, 61.22449, 39.08629, 42.18077, 10.447761, 14.854111, 4.545455, 35.68147, 41.592920, 33.33333, 46.89441, 16.531792, 34.9, 28.39248, 31.200000),
    theta = c("Goals", "G/Sh", "G/SoT", "ShoDist", "PasTotCmp", "PasTotAtt", "Assists", "PPA", "CrsPA", "SCA", "GCA", "GCADrib", "Press", "DriAtt", "DriSucc%", "Fld", "AerWon%"),
    name = 'Ciro Immobile',
    mode = 'lines+markers'
  ) 

fig <- fig %>%
  add_trace(
    r = c(83.177570, 61.48571, 72.222222, 57.14286, 29.61083, 34.57676, 26.865672, 27.320955, 0.000000, 36.44717, 40.707965, 23.33333, 52.17391, 25.086705, 41.0, 17.745303, 35.20000),
    theta = c("Goals", "G/Sh", "G/SoT", "ShoDist", "PasTotCmp", "PasTotAtt", "Assists", "PPA", "CrsPA", "SCA", "GCA", "GCADrib", "Press", "DriAtt", "DriSucc%", "Fld", "AerWon%"),
    name = 'Wissam Ben Yedder',
    mode = 'lines+markers'
  ) 

fig <- fig %>%
  add_trace(
    r = c(0.000000, 100.00000, 0.000000, 68.16327, 32.31810, 40.17217, 0.000000, 18.832891, 23.376623, 38.28484, 0.000000, 0.00000, 63.66460, 20.693642, 60.0, 29.853862, 30.800000),
    theta = c("Goals", "G/Sh", "G/SoT", "ShoDist", "PasTotCmp", "PasTotAtt", "Assists", "PPA", "CrsPA", "SCA", "GCA", "GCADrib", "Press", "DriAtt", "DriSucc%", "Fld", "AerWon%"),
    name = 'Przemysław Płacheta',
    mode = 'lines+markers'
  ) 

fig <- fig %>%
  add_trace(
    r = c(0.000000, 25.37143, 0.000000, 63.67347, 18.78173, 24.67719, 17.910448, 19.628647, 0.000000, 37.82542, 22.123894, 0.00000, 72.98137, 25.664740, 33.3, 30.897704, 47.33333),
    theta = c("Goals", "G/Sh", "G/SoT", "ShoDist", "PasTotCmp", "PasTotAtt", "Assists", "PPA", "CrsPA", "SCA", "GCA", "GCADrib", "Press", "DriAtt", "DriSucc%", "Fld", "AerWon%"),
    name = 'Dickson Abiama',
    mode = 'lines+markers'
  ) 

fig <- fig %>%
  add_trace(
    r = c(0.000000, 25.37143, 0.000000, 58.77551, 21.15059, 27.40316, 26.865672, 18.567639, 0.000000, 34.915773, 30.973451, 0.00000, 33.22981, 20.231214, 80.0, 32.985386, 51.60000),
    theta = c("Goals", "G/Sh", "G/SoT", "ShoDist", "PasTotCmp", "PasTotAtt", "Assists", "PPA", "CrsPA", "SCA", "GCA", "GCADrib", "Press", "DriAtt", "DriSucc%", "Fld", "AerWon%"),
    name = 'Carlos Bacca',
    mode = 'lines+markers'
  ) 

fig <- fig %>%
  add_trace(
    r = c(0.000000, 38.05714, 0.000000, 78.36735, 50.59222, 52.51076, 40.298507, 14.323607, 9.090909, 47.62634, 47.787611, 46.66667, 27.26708, 73.410405, 51.1, 33.82046, 22.266667),
    theta = c("Goals", "G/Sh", "G/SoT", "ShoDist", "PasTotCmp", "PasTotAtt", "Assists", "PPA", "CrsPA", "SCA", "GCA", "GCADrib", "Press", "DriAtt", "DriSucc%", "Fld", "AerWon%"),
    name = 'Jeremie Boga',
    mode = 'lines+markers'
  ) 

fig <- fig %>%
  add_trace(
    r = c(0.000000, 47.65714, 0.000000, 72.24490, 23.18105, 30.27260, 0.000000, 31.564987, 35.714286, 37.97856, 0.000000, 0.00000, 68.01242, 25.433526, 54.2, 9.603340, 18.13333),
    theta = c("Goals", "G/Sh", "G/SoT", "ShoDist", "PasTotCmp", "PasTotAtt", "Assists", "PPA", "CrsPA", "SCA", "GCA", "GCADrib", "Press", "DriAtt", "DriSucc%", "Fld", "AerWon%"),
    name = 'Mitchell van Bergen',
    mode = 'markers'
  ) 

fig <- fig %>%
  layout(
    polar = list(
      radialaxis = list(
        visible = T,
        range = c(0,100)
      )
    ),
    title = "Comparison of the best and worst Goals in each league in key statistics"
  )

fig
```

## 3.3 EDA Demographic and economic data

### 3.3.1 Number of players by country of origin 2020/2021

```{r barplot all, echo=TRUE}

demo_clean <- read.csv("data/luca/demo_clean.csv")
data <- demo_clean$Country.Name
agg_data <- aggregate(count ~ Country.Name, data = data.frame(Country.Name = data, count = 1), FUN = length)
sorted_agg_data <- agg_data[order(agg_data$count, decreasing = TRUE), ]
top_fifteen <- head(sorted_agg_data[order(sorted_agg_data$count, decreasing = FALSE), ], 57)

sorted_agg_data$TopFifteen <- ifelse(sorted_agg_data$Country.Name %in% top_fifteen$Country.Name, sorted_agg_data$Country.Name, "Other")

sorted_agg_data <- sorted_agg_data[order(sorted_agg_data$count, decreasing = FALSE), ]

hover_text <- paste("Country: ", sorted_agg_data$Country.Name, "<br>",
                    "Players: ", sorted_agg_data$count)

plotly::plot_ly(x = sorted_agg_data$Country.Name, y = sorted_agg_data$count, type = "bar",
                marker = list(color = ifelse(sorted_agg_data$TopFifteen == "Other", "skyblue", "grey"),
                              line = list(color = "black", width = 1))) %>%
  plotly::layout(title = "Frequency of Country of origin 2021-2022",
                 xaxis = list(title = "Country of origin", tickangle = 45, categoryorder = "array", categoryarray = sorted_agg_data$Country.Name),
                 yaxis = list(title = "Number of players"))
```

### 3.3.2 Top 15 countries

In this graph we only have the top fifteen countries in regard of country of origin. We can observe that the top five are country hosting the five biggest leagues in Europe (top5) named : "Premier League", "La Liga", "Serie A", "Bundesliga", "Ligue 1".

```{r barplot biggest 15}
demo_clean <- read.csv("data/luca/demo_clean.csv")
data <- demo_clean$Country.Name
agg_data <- aggregate(count ~ Country.Name, data = data.frame(Country.Name = data, count = 1), FUN = length)
sorted_agg_data <- agg_data[order(agg_data$count, decreasing = TRUE), ]
top_fifteen <- sorted_agg_data$Country.Name[15:1]
filtered_data <- sorted_agg_data[sorted_agg_data$Country.Name %in% top_fifteen, ]
hover_text <- paste("Country: ", filtered_data$Country.Name, "<br>",
                    "Frequency: ", filtered_data$count)
plotly::plot_ly(x = filtered_data$Country.Name, y = filtered_data$count, type = "bar",
                marker = list(color = "skyblue", line = list(color = "black", width = 1)),
                 hoverinfo = hover_text) %>%
  plotly::layout(title = "Frequency of Country of origin 2021-2022 (Top Fifteen)",
                 xaxis = list(title = "Country of origin", tickangle = 45, categoryorder = "array", categoryarray = top_fifteen),
                 yaxis = list(title = "Frequency"))
```

3.3.3 GDP per capita 1990-2020

```{r GDP per capita 1990-2020, echo=FALSE}

gdpcut<- read.csv("data/luca/demo_clean.csv")
gdpcut <- gdpcut[, c("Country.Name", "Country.Code", paste0("X", 1990:2020))]
gdpcut_unique <- gdpcut[!duplicated(gdpcut$Country.Name), c("Country.Name", "Country.Code", paste0("X", 1990:2020))]

columns_to_convert <- paste0("X", 1990:2020)

for (col in columns_to_convert) {

  gdpcut_unique[[col]] <- as.numeric(gsub("'", "", as.character(gdpcut_unique[[col]])))
}


for (col in columns_to_convert) {
  gdpcut_unique[[col]] <- as.numeric(as.character(gdpcut_unique[[col]]))
}

gdp_data <- gdpcut_unique

ui <- fluidPage(
  titlePanel("GDP Data Exploration"),
  sidebarLayout(
    sidebarPanel(
      sliderInput("year", "Select Year", min = 1990, max = 2020, value = 1990)
    ),
    mainPanel(
      plotlyOutput("barplot", height = "600px", width = "800px")
    )
  )
)

server <- function(input, output) {
  
  output$barplot <- renderPlotly({
    year_col <- paste0("X", input$year)
    gdp_subset <- gdp_data[, c("Country.Name", year_col)]
    gdp_subset <- gdp_subset[complete.cases(gdp_subset[[year_col]]), ]
    gdp_subset <- gdp_subset[order(-gdp_subset[[year_col]]), ]
    top_50 <- head(gdp_subset, 50)
    
    p <- ggplot(top_50, aes(x = reorder(Country.Name, top_50[[year_col]]), y = top_50[[year_col]])) +
      geom_bar(stat = "identity", fill = "skyblue") +
      labs(title = paste("Top 50 GDP for the year", input$year),
           x = "Country", y = "GDP per capita in $") +
      theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
      coord_flip()
    
    ggplotly(p, tooltip = c("y")) %>%
      layout(hoverlabel = list(bgcolor = "white", bordercolor = "black", font = list(family = "Arial, sans-serif")))
  })
}

# Run the Shiny app
shinyApp(ui = ui, server = server)


```

## 3.4 teams data

### 3.4.1 Count of players in the big five 2020/2021.

The distribution of players among the top five leagues shows a relatively even spread, with the Premier League leading by a narrow margin, closely followed by Ligue 1. We coud explain this because the Premier League's global appeal and financial strength have made it a magnet for talent worldwide. Meanwhile, Ligue 1's emphasis on skill development and nurturing young players has propelled it to a close second position.

```{r répartion club, echo=TRUE}
plot_player_distribution <- function(player_data) {
  player_data <- player_data[order(player_data$players), ]  
  player_data$league <- factor(player_data$league, levels = player_data$league)
  

  my_colors <- c("#1f77b4", "#ff7f0e", "#2ca02c", "#d62728", "#9467bd")
  
  p <- ggplot(player_data, aes(x = reorder(league, players), y = players, fill = league, text = paste("League: ", league, "<br>Players: ", players))) +
    geom_bar(stat = "identity", color = "black", alpha = 1, show.legend = TRUE, width = 0.5) +
    scale_fill_manual(values = my_colors) +  
    labs(title = "Distribution of Soccer Players in Big Five Leagues",
         x = "League",
         y = "Number of Players") +
    theme_minimal()
  
  ggplotly(p, tooltip = "text")
}

combined_data <- data.frame(
  league = c("Premier League", "La Liga", "Serie A", "Bundesliga", "Ligue 1"),
  players = c(85, 69, 80, 69, 84)
)

plot_player_distribution(combined_data)
```

### 3.4.2 Evolution of economic evaluation of Big five between 2012-2024 in Europe in euros.

This graph illustrates the economic assessment of the Big Five leagues from 2012 to 2024. The Premier League significantly outperforms its counterparts, exhibiting an almost 50% larger valuation than the second-ranking league in 2012, which further expands to an almost 80% difference by 2024.

In contrast, the other four leagues demonstrate a paired evolution pattern: the Bundesliga closely aligns with La Liga, while Ligue 1 tracks a similar trajectory to Serie A.

We can see a recovery post 2021-2022 covid, the return of fans to stadia resulted in a significant improvement in matchday revenues.

```{r revenu big 5, echo=TRUE}
Bundesliga <- c("2.018", "2.275", "2.392", "2.712", "2.793", "3.168", "3.345", "3.208", "3.005", "3.149", "3.550", "3.450")
SerieA <- c("1.677", "1.700", "1.790", "1.917", "2.062", "2.239", "2.495", "2.057", "2.521", "2.350", "2.600", "2.050")
LaLiga <- c("1.868", "1.933", "2.053", "2.437", "2.865", "3.073", "3.378", "3.114", "2.953", "3.277", "3.300", "3.400")
Ligue1 <- c("1.297", "1.498", "1.418", "1.485", "1.643", "1.692", "1.902", "1.598", "1.614", "2.026", "2.100", "2.050")
Premierleague <- c("2.946", "3.897", "4.403", "4.865", "5.301", "5.440", "5.843", "5.123", "5.498", "6.442", "6.605", "6.662")
Dates <- c("2012-2013", "2013-2014", "2014-2015", "2015-2016", "2016-2017", "2017-2018", "2018-2019", "2019-2020", "2020-2021", "2021-2022", "2022-2023", "2023-2024")

Bundesliga <- as.numeric(Bundesliga)
SerieA <- as.numeric(SerieA)
LaLiga <- as.numeric(LaLiga)
Ligue1 <- as.numeric(Ligue1)
Premierleague <- as.numeric(Premierleague)

data <- data.frame(
  Dates = Dates,
  Bundesliga = Bundesliga,
  SerieA = SerieA,
  LaLiga = LaLiga,
  Ligue1 = Ligue1,
  Premierleague = Premierleague
) 

data$Dates <- factor(data$Dates, levels = Dates)
data_melted <- melt(data, id.vars = "Dates") 

library(ggplot2)
library(plotly)

p <- ggplot(data_melted, aes(x = Dates, y = value, color = variable, group = variable)) +
  geom_line() +  
  geom_point() +
  labs(
    title = "Football League Comparison",
    x = "Season",
    y = "Value in billions"
  ) +
  scale_color_manual(values = c("Bundesliga" = "red", "SerieA" = "blue", "LaLiga" = "green", "Ligue1" = "orange", "Premierleague" = "purple")) +
  theme_minimal() +
  theme(legend.position = "top")

ggplotly(p, tooltip = c("", "value")) 

```

### 3.4.3 Comparison of **revenue from broadcasting rights of European soccer leagues in 2019/20.**

This pie chart shows the revenue from broadcasting rights of soccer leagues in Europe in the 2019/20 season. The premier leagues still ranks first proving it's economic superiority having 12% more of market revenue during the period .

```{r fpie tv,echo = TRUE}

tv <- tibble(
  `Comp` = c("Premier League", "La Liga", "Bundesliga", "Serie A", "Ligue 1"),
  `Revenue` = c(2.669, 1.711, 1.489, 1.190, 0.690)
)

# Calculate percentages for the pie chart
tv$percent <- tv$Revenue / sum(tv$Revenue) * 100


data <- data.frame("Categorie" = tv$Comp, "X1960" = tv$Revenue)

colors <- c('rgb(211,94,96)', 'rgb(128,133,133)', 'rgb(144,103,167)', 'rgb(171,104,87)', 'rgb(114,147,203)')

fig <- plot_ly(data, labels = ~Categorie, values = ~X1960, type = 'pie',
               textposition = 'inside',
               textinfo = 'label+percent',
               insidetextfont = list(color = '#FFFFFF'),
               hoverinfo = 'text',  
               text = ~paste(tv$Comp, '<br>', 'Revenue: euros', X1960, 'B', '<br>', round(tv$percent, 2), '%'),
               marker = list(colors = colors,
                             line = list(color = '#FFFFFF', width = 1)),
               showlegend = FALSE)

fig <- fig %>% layout(title = 'Tv revenue by league in 2021/2022',
                      xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
                      yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))

fig
```
