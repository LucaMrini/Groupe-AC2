---
title: "Notre titre"
format: pdf
editor: visual
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Questions

```{r include=FALSE}




# Json 
```

## Packages

We used the different packages to do ......

```{r include = FALSE}
packages <- c(
  "dplyr", # for the project's organization
  "tidyverse", # for wrangling
  "ggrepel", "gghighlight", "patchwork", "maps", "scales",
  "knitr","readr", # for plotting
  "jsonlite"
)
purrr::walk(packages, library, character.only = TRUE)
#tinytex::install_tinytex()

```

## Library

Pour nous mais ne devra pas apparaître pour le projet

```{r include = FALSE}
#library(knitr)
library(readr)
library(knitr)
library(jsonlite)
library(dplyr)
```

## Databases

Here are the databases that we used :

Player 1 : contains ..... that we used into our final database for ......

player 2 : Is a folder of multiple Json that contains the weight and size of players for the different principal major leagues.

Data_one : Pour délimiter les variables, et pour pouvoir enlever les ? de la base de données

```{r}

skill <- read.csv("data/skill.csv", header = TRUE,sep = ";" )
#player2 <- jsonlite::fromJSON(txt ="Football_Players/2017LaLiga.json")

Data_One <- read_delim("data/skill.csv", delim = ";", escape_double = FALSE, locale = locale(encoding = "ISO-8859-1"), 
                       trim_ws = TRUE) 
  Data_One <- Data_One %>%
  filter(MP >= 9) 
  Data_One <- Data_One %>%
  filter(Min >= 180) 
  
  
```

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
1 + 1
```

You can add options to executable code like this

```{r}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed).

```{r}

```

# I Database et cleaning

Titre intro : .....

```{r}
tibble(Variables = c("Rk","Player","Nation", "Pos", "Squad", "Comp","Born", "Mp", "Min", "Goals", "SoT%", "G/Sh", "ShoDist", "PasTotAtt","PasTotCmp%", "Assists","PPA","CrsPA","SCA","GCA","GcaDrib","Press%","DriAtt","DriSucc%","Fld","AERwon%"), Meaning = c("Rank of the player","Player's name","Player's nation","Position","Squad's name","League that squad occupies","Year of birth","Matches played","Minutes played","Goals scored or allowed","Shots on target percentage (Does not include penalty kicks)","Goals per shot","Average distance, in yards, from goal of all shots taken (Does not include penalty kicks)","Passes attempted","Pass completion percentage","Assists","Completed passes into the 18-yard box","Completed crosses into the 18-yard box","Shot-creating actions","Goal-creating actions","Successful dribbles that lead to a goal"," Percentage of time the squad gained possession withing five seconds of applying pressure","Dribbles attempted","Percentage of dribbles completed successfully","Fouls drawn","AerWon% : Percentage of aerials won"))%>%
  kbl()%>%
  kable_styling(position = "center")%>%
  column_spec(1:2, color = "black")%>%
row_spec(0, background = "black")
  
```

## Problems and solutions

1.  Special characters not appearing

    While we used the database Player 1 we saw that special characters like : x y z were not appearing in the r markdown while it appeared into the base document ......

    Solution : we first tried to add "file encoding="UTF-8" to the read.csv of the document without success

```{r}
#Corrective special characters 

#player1 <- read.csv("/Users/lucamarini/Documents/GitHub/
#2021-2022 Football Player Stats.csv",
#                 header = TRUE,sep = ";" )

```

We then used the following method ......

| Col1 | Col2 | Col3 |
|------|------|------|
|      |      |      |
|      |      |      |
|      |      |      |
