---
title: "Factors influencing the performance of football players - Analysis in a key position"
format: html
editor: visual
---

# 1 Introduction

## 1.1 Overview and Motivation

This is a project analyzing the factors influencing the performance of football players in a key position. Here's how it all began:

The choice of sport, and football in particular, was a natural one. With football being the best-known and most practiced sport, it was not surprising that everyone in our group was at least a little interested in it. Moreover, one of our members has been passionate about the sport since childhood. Having played in clubs for over 10 years and watched a lot of matches every week, he thought it would be beneficial for a project of this scale to put his knowledge to good use in a subject that has always interested him thus combining passion with academic work: Data in the world of sport.

Nowadays, data has taken on an enormous importance in this sport, allowing some of the more economically modest teams to maintain a certain level by picking interesting players in lower leagues and, of course, at a lower cost. There are many examples of this: Toulouse FC in France and Brentford FC in England to name but a few. The fact that you can use statistics to compensate for a lack of resources is such an interesting subject. Another inspiration for our subject comes from outside football. The presence of data in sport has also enabled the world of cinema to bring out "Moneyball", starring Brad Pitt, showing how the Oakland Athletics baseball team managed to build a highly competitive team despite having more modest resources than the other big franchises, thanks to a method known as sabermetrics. The fact that we have a film that in some way demonstrates the process used to improve a team through statistics is a real plus, and has enabled us to ask ourselves the following question: what common characteristics do the best players in the striker's position have, for example? The existence of websites like "fantasy football leagues" or sports betting sites, in a way, necessitates having databases of various statistics related to player performance, such as the number of shots on target, successful passes, and so on. Therefore, it is an advantage because we have access to a plethora of different databases containing various statistics, which alleviates some of the burden of searching for a sufficiently large database for this project.

## 1.2 Project Objectives

Working on player performance statistics, it is interesting to see which statistics are important for different positions and especially between different leagues. From experience, we can say that, for example, English football is much more physical than the German league. Does it necessarily mean that our striker needs to be over 1.90 meters tall and have a certain weight to score a lot of goals? Additionally, of course, each team plays with a different system and strategy. Nevertheless, could we extract meaningful statistics within a position that in some way show a need to excel in a specific statistic? These kinds of questions set our goals and also allow us to put ourselves in the shoes of a data analyst within a club, demonstrating the complexity of the work but, more importantly, the ability to study the process by which a player is recruited based on their statistics and whether there is a way to predict their individual success and, beyond that, their importance in the collective success of their team. We decided to focus on a key position (striker), and on the characteristics chosen to be 'limited' because, as an outsider, we obviously don't have all the possible factors influencing performance that a real data analyst would have, so this allows us to imagine an opening for future work due to the enormity of the resources in this area and it obviously shows the complexity of such a profession.

Thus, the objective would be to identify the most significant statistics for a key position, allowing us to visualize the crucial skills required to maximize a player's potential success during a transfer. The advantage would then be to find a way to predict this success.

## 1.3 Research questions

On an individual performance level:

-   Among the top goal scorers in the top 5 leagues, what are the common factors and statistics that are significant, and how it evolves depending on the championship?

-   What are the main physical factors influencing the goals per short on target (90')?

-   What specific statistics consistently distinguish Ballon d'Or winners from other top players, and how have these trends evolved over the past decades?

On an economic level:

-   How different cultural and economic indicators, such as a footballer's nationality, his country's GDP or his club revenue influence his individual performance and the overall performance of his team?

# 2 Data

## 2.1 Raw Datasets

### 2.1.1

## 2.2 Data Wrangling

### 2.2.1 Data Wrangling: Players clean

Cleaning up the database of player performances and statistics was a very complex task. Several types of problem arose, and we had to make choices and take initiatives for the rest of our analysis.

The *dplyr*, *readr, stringr, tidyr and lubridate* libraries were used during this data wrangling exercise.

Firstly, when we downloaded our database, a major problem appeared. As soon as a player or team name contained a special character such as an acute accent, the accent changed to **?** and we realized that we had an encoding problem. To overcome this problem, we tested different encoding, in particular *'UTF-8'*, and others *'ISO'*, but the problem didn't go away. In fact, some names ended up with the wrong accent. Nevertheless, we found that the *'ISO-8859-1'* encoding was the most suitable, leaving us with a problem with Slavic and ex-Yugoslav family names in particular. We therefore tried to create a list of players with the remaining encoding problem.

Understanding that special characters were indeed very special for these players, we took the initiative of manually renaming certain players such as *"Edin Džeko"*, using the *sub()* function, and then using the *gsub()* function, we replaced the last **?** with the letter **ć**, which was generally the letter most present in names with this problem. However, for some reason, the players *"Dušan Vlahović"* and *"Nikola Vlašić"* had spaces instead of the letter **"š"**, so we had to use another method to rename them. We used the *ifelse()* function, and as it wasn't possible to rename them using the basic written name, we had to use another common key: **Rk**.

It was important first to explain how we renamed our players and teams in the first place, as this was a major problem. However, before beginning the steps above, we first sorted the database a little. First of all, we had duplicate players because, as our database covers an entire season, it's quite normal to have transfers in mid-season, which explains the presence of duplicate players with different characteristics such as the club. The *distinct()* function allows us to remove duplicates.

Next, we had to filter the database for various reasons. For the rest of our analysis, certain columns will be important, such as the **Goals** column. However, when we were still getting to know our database, we noticed that this column produced some surprising results. In fact, this column represents the number of goals per 90 minutes, but some players had crazy statistics. *Pablo Sarabia*, for example, scored 5 goals every 90 minutes. The problem was that *Sarabia* hadn't played many minutes (22). We therefore realized that players who had been effective but had played few minutes would have disproportionately high statistics, because their statistics would then be weighted against the 90 minutes that our database covers.

So, using the *filter()* function, we took the initiative of only keeping players who had played at least 9 matches **(MP \>= 9)** and who had played at least 405 minutes **(Min \>= 405)**. This choice was made because we assumed that our players had to have played at least half the matches in half a season, because as we said, some players were transferred during the middle of the season. Moreover, in terms of minutes, we wanted them to have played at least one half of the 9 matches they played (45 minutes), and by multiplying that by the number of matches, we arrived at our figures. Thus, we only want to keep the attacking players, so those whose positions begin with the letter **'F'** for Forward.

Now that the database has been filtered, we are missing two columns for the rest of our project: **Height** and **Weight**. To do this, we decided to take a database from the FIFA21 game, the year of our statistics, which had the missing characteristics. However, here too we encountered a number of problems.

Firstly, we needed a common key to join the two databases. To do this, *rename()* allowed us to rename **Name** to **Player** and then, thanks to *left_join()*, the two databases were joined. Now we needed to see which players didn't have values for **Height** and **Weight**, so we created a *height_na* list using *filter(is.na())*. So 85 players had missing values. For a start, we could have players who simply didn't have the same spelling, for example *Sehrou/Serhou Guirassy* depending on the database. Then there was the fact that the FIFA21 database had full names, meaning that some players had their 2nd and 3rd first names included, something that was not in our database. Finally, there were some players who simply didn't appear in the game.

To overcome these problems, we tried various solutions. The one we kept was to separate the **Player** column into **Surname** and **Name**, using *separate()*, in order to be able to search and fill in via the **Name** common key. The problem with this solution was that we now had duplicates that we had to remove. This solution enabled us to reduce the number of missing values to 50.

A final attempt was to use several common keys at the same time. To do this, we needed the year of birth and the team in which the player plays. Once we had made sure we had these common keys, a new *left_join()* with a *by = c("Born", "Squad")* inside was used, and we could try to fill in the missing NAs. This choice of common keys was made on the assumption that if we only had strikers, it was quite possible that the strikers in the same team would differ in age, which would help us to maximise our chances of replacements. That's how we got down to 38 values.

However, we realized that it would be too complex to find the last missing values. So we stopped and looked at our *height_na* and realized that most of these players via the **Goals** column would not interest us for the rest of our analysis. We therefore took the initiative of manually replacing the **Height** and **Weight** of the best player from the **Goals** column for each of the 5 leagues, using *mutate()*, in order to keep players who might be of interest to us for the analysis. For the rest of the players, we decided to remove them from our database using *filter(!is.na())*.

It was now necessary to re-join **Surname** and **Name** as **Player** to avoid NAs filling up in one of the columns because of Brazilian players, for example, who are only called by their name.

Before concluding, you should know that in our analysis we want to compare the statistical and physical trends between the different leagues. So, to finish with this database, we wanted to create 5 different databases in order to have the players in each league, and to do this we had to create *"comp_players"* using the *filter()* function. We now have the databases we need to approach the various remaining stages of this project.

### 2.2.2 Data Wrangling: Ballon d'Or clean

Now, it's time to clean up the Ballon d'Or database. This was less difficult than the previous database, although it still required some work. The *dplyr* and *readr* libraries were used during this data wrangling exercise. First, we needed to filter our database to keep only the winners from the last 20 years. This choice was made to observe the evolution of 21st-century football. It's important to note that there was no Ballon d'Or awarded in 2020, hence its absence. To do this, nothing was more efficient than using a *filter()* function.

Next, we encountered a naming issue with a certain player. For some reason, Luka Modrić was listed as 'Croatia Luka Modric' so it was necessary to rename him using the *mutate()* function in conjunction with *ifelse()*.

Now, we could start adding new columns that would be useful for the project's analysis. We aimed to add the following columns: **Age, Height, Weight, PreferredFoot, and PreferredPositions**.

To achieve this, we needed other databases to join the missing columns. We chose FIFA05 and FIFA21 databases because the oldest winners are not present in the most modern game. To maximize our chances of having the necessary variables, we opted for two databases. To join two databases, we needed a common key. The **Player** column was the most suitable, so we aligned this name in the other databases using the *rename()* function. Having a common key allowed us to merge the databases using the *left_join()* function. However, this resulted in numerous unnecessary columns in our database. Using the *select()* function, we retained only the necessary columns. This process will be repeated while writing the code.

New challenges arose. For the sake of our analysis, we needed new columns. Firstly, an **Age** column. We now had the birth date and wanted the age at the time of winning. As some players won multiple times, they needed different ages for each success. Therefore, retrieving age from other databases wasn't feasible; we had to do it ourselves. We used the *sub()* function to extract the birth year and then, with *mutate()*, created the **Age** column by subtracting the birth year from the Ballon d'Or's year.

Next, to replace missing values in our columns, we used a combination of *\$* and *ifelse(is.na())* functions. *\$* was used to select the database and column we wanted to work on, while the latter function replaced missing values. Consequently, our columns were filled with values from the two external databases.

However, we encountered an issue with the player **Kaka**, who had missing values for some columns. As he was the only player with this problem, we manually created a *Kaka_values \<- c()* containing the different characteristics and used this in an *ifelse()* function to replace the missing values.

Before finishing and selecting only the useful columns, we needed to standardize the **PreferredFoot** and **PreferredPositions** columns. **PreferredFoot** sometimes had values like *R* instead of *Right*, and **PreferredPositions** had '-' instead of '/'. The *ifelse()* and *gsub()* functions were instrumental in this process.

Now, the Ballon d'Or database is cleaned up with the columns we intend to use for the analysis ahead.

# 3 EDA

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
1 + 1
```

You can add options to executable code like this

```{r}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed).
